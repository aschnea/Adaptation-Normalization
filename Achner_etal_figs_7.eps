%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Achner_etal_figs.pdf
%%Creator: Adobe Acrobat 11.0.15
%%For: amir
%%CreationDate: 8/30/2018, 4:26:06 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 8444 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   xmp:ModifyDate="2018-08-30T12:11:22-04:00"
   xmp:CreateDate="2018-07-17T09:03:01-04:00"
   xmp:MetadataDate="2018-08-30T12:11:22-04:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:137fd659-52c9-4292-a65b-9ca621c33466"
   xmpMM:InstanceID="uuid:6eac36c3-cc23-4f0a-88c0-490d2cf83c4d"
   xmpMM:RenditionClass="proof:pdf"
   pdf:Producer="itext-paulo-155 (itextpdf.sf.net-lowagie.com)"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="200"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADIAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FUo8wXuv231H9EWa3YmuUjvS1P3UBrykALx7r1716U3qFURo9zqcttCmpxxx34t4&#xA;ZboRV4CWTlzRQS2ylf5jXFUfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdiqS+Z/MNxosVpJDps+pfWZxC6W4ZmRSCeZCq3SnegpXfsVW/LeqzarDHqE1nJYyXNpbyvbS/a&#xA;RmaWq7hW28eIriqc4q7FXYqteRVoDux+yo6nASi0NayXoluPraqsZk/0ZkJPwcVoHr0blXptkIGV&#xA;ni79mMSd7ReWM3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk/mTzVpXl2K1l1EuI7uZ&#xA;beNkUNRmGxIqDT5VPtSuKu8va1Z60i6laBlhurWCVY5KCRQzy7OqluJ2oRXFU4xVxIAJJoB1JxVT&#xA;5SP9gcV/nI3+gH+ORslCGfU9Jti4muo4ipIdpWCkkdaFqcqV7dOmQOWEeZpjxxHMu/TWjMN763o1&#xA;fhaRAdq8qgntQ1x8fH/OHzXxI94VoZUMSTQsJbaRQyMu/wAJFQR4jJA7WOSQeo5K4IIBBqDuCMmy&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQh1HSZI4JDdQPHcSenavzQq8lCOMZr8TbHYb&#xA;4q1aPA93I1uVaA28HpmMgpx5S0402piq+a99O8htVid3mR3EgB9NeFPtNSgryyuU6kI1zYmW9Kwi&#xA;qQ0h5sNwOw+Qydd6aX4UpXqelCZkltbW0e45MzSXMZahK0DLxoa8gK79Mx8uG9wI35tU8d8gPilV&#xA;h5ZuRqiXN5b2rQBZBKoRNyxajABAP2t+/v2zHx6U8dyEaaoYTxWQGTxRRQxJFEgjijUKiKKBVAoA&#xA;APDM8AAUHJApooyktH33ZOx+XgcFdyrkcMKj5EHqDhBS3hV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KqdyaW8p5OlEY8415uNuqrxfkw7DiflirAPy88nw3fkDRrXXbW6iubK4muoopmmt50f6xI6FwG&#xA;5eDAVp0xVl2iaPp2kEadp0IgtLW1t4YI6sxCI0oVeTFmNPc4qmtBWvfxxV2KuxV2KuxV2KuxVSuE&#xA;k9N3g4icKeHIkKSBsHp2rkZA9OaD5IHy3qVzqWjw3d1BJbzs0iSRSrxascjJUD+U8ar7ZMxIq+dD&#xA;7mMCSLKZ4GbsVdirsVdirsVdirsVdirsVdirsVdiqydpVgkaJeUoVjGoANWA2FCyDr4sPmMVeXfl&#xA;p5RsdW/LzR39a9s5Ir+e/dpCvrNMkrxjmr+ugHFAKLtTbapGKs78uaLBosS6bBJJLFa2sEaPKakg&#xA;PKRt0FK0FO2KpzirsVdirsVdirsVdiqhL++k9AfYG8x9uyfT39vnkhtuhWVFQUUUBJP0san8TkUt&#xA;4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3MTy20sSP6byIyq/wAXwlhQH4WRtvZgffFWHaN5B1bR&#xA;/LOjaLZa1wbTbpri6uI4WhW4jeV5Gi9NZSVB58d2bx60xVPfL9je2KLa3t015dRWsCTTtU8mDy1I&#xA;Lln9viYnxJO+Kq+sS6lHJpxsY4pAboC6ErMp9D035mPiDVx2B2yzGBvfcxNpgjq6hlNVPQ5WybxV&#xA;2KuxV2Kqc8pjQcRWRzxjXxY+PsOp9sICtwxCNAtanqzHqWPU4kqvwK7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqlOvR+Y2awOiyQoEuUbUFm252w+2q/C+57UpvTelQVV+jrqSlE1No5L9bK1F3LFU&#xA;I049T1SqkCi8umKpniqk6NGxkiFa7yRj9r3H+V+vDaGpkF1aSRpK0YmRkE0dA6FgRyWoNGX3HXEb&#xA;FWEar5M1qy9E6TqGq3kYPGO2F+bdYgqGiszBw0bFVX7HJdyD2zNhqIn6hEfBrMCOVpRoXljzub+3&#xA;sLu41W10owyJJefXgWRl9VYvTQMSAAyjdd6KfHLcmbHRI4TL3e5hGMvNn2haG+jx3Hq6neagJSG5&#xA;X0ok9MKCKKaCgp1zByZOOtgPc3RjXVMIAXYzuKFhSNT2T+rdT9HhlZ7kq2BLsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVUrt7hLWZ7eMS3CoxhiJChnAJVanpU7Yqlfl261W5jWbVbb6pfvawNcQ&#xA;inEMXl6APJTahpyNK0qcVTnFXYqpPG6MZYtyftx9m9x4N+vv4g2hUR1dQymqn6OmxBB74CEt4qoP&#xA;++l9L/dcZBl926qv8T9HvkuSFfIpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrW/M2la&#xA;LLYQ30hWTUrgW1uop9ogks1SKKKbnFV2j6lbamUv7bn6F3ZWtzDzUqeE3qOtQe9DuO2KpnirsVdi&#xA;qk8bqxliFWP95H0De/sw/sPahBVSa95OYoRWQqpSvYsWB5D/ACeO/wB2HhRaIijWNAi9B3PUk7kn&#xA;3JwEpXYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQWp6ppdh9WW/lVDdTCC1UqXLykEg&#xA;KFDHoDviqFsda0m5na5huoxDNbwtHzPptTnKN0fiykEUII2xVHfpPTf+WuH/AJGL/XFXfpPTf+Wu&#xA;H/kYv9cVd+k9N/5a4f8AkYv9cVd+k9N/5a4f+Ri/1xVAQrokeuXOqLPELieCGB5fWBBEbO3HhyoK&#xA;chvTJmZ4RHzRW9o/9J6b/wAtcP8AyMX+uQS79J6b/wAtcP8AyMX+uKu/Sem/8tcP/Ixf64q79J6a&#xA;f+PuH/kYv9cVbXULB2CrcxMzGiqHUkk9hviqIxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVB6jo2k6&#xA;kYjqFnDdmBucBmjVyjEUqpYGmKoa9u9E8u6TBAZrfS7UD6rY+qRHCriNmRK9AAqE/IYq8y0Tzz53&#xA;j+qTan5l8qz26wu7uZiszxE0MjhCgRkl4x8FXepqOQxV6R5U8wW+saTayNfWN3qf1eJ9QTT5RJEk&#xA;rAhuIJLhOasBy328RiqdYqkHmfzVpmm293ZrqlnY6x6Aa3+uSCNEMwkEcr1B+FfSdj7Ka0G+KsR8&#xA;ref9Rg1N7fzR5i8tNayyMIHs7mszMQ78ST6acUjEfxEeIqTTFXo9pe2d7brc2c8dzbvUJNC6yIeJ&#xA;KtRlJBowIOKq2KsPu4vzVh1O8ewm0u506Zma0iuxKrwgSIEWsSpUNHzLcqkGlD2xVqxm/NaOSBb2&#xA;10Y25a3WVbU3HJEMzLOw9RkHwQcWUfzVGKsxxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBap&#xA;omjatCINUsYL6EVAjuI1lUcutA4PWmKpSPy48hDmP0BYlZKckaBGXZuY4qQQvx/Ft3364qmml+X9&#xA;C0nkdM0+3si4o5giSMkci9DxA25MTTFUfiqVal5T8sapK02o6VaXcrhg8k0KOxDp6TAsRU1T4fli&#xA;qWx/lh+XUaRIvlvTiIFCxF7aJ2UKKD4mBb8cVZBY2FlYWqWljbx2trHX04IVCIvIljRVAAqSTiqv&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirFvONj55lmivPLN7DF9UhdvqEy1FxMXQhSxKhf3Ya&#xA;lTSvh9rFUo0WH863+ryapPpcKetAZ4VDNJ9XJlacMVXgJVQxKvEleXM9KYqyvytb69b6Daw6/cJd&#xA;augf61PFQI1XYpSip0TiOmKprirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="612.000000"
    stDim:h="792.000000"
    stDim:unit="Points"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="ArialMT"
      stFnt:fontFamily="Arial"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 5.06"
      stFnt:composite="False"
      stFnt:fontFileName="arial.ttf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 7 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
gsave
0 792 mo
612 792 li
612 0 li
0 0 li
0 792 li
clp
254.242 155.739 mo
262.552 155.682 li
270.862 155.628 li
279.172 155.574 li
287.482 155.52 li
295.792 155.465 li
304.101 155.408 li
304.127 155.408 li
304.127 149.463 li
304.127 149.445 li
304.101 149.445 li
295.792 149.591 li
287.482 149.748 li
279.172 149.917 li
270.862 150.101 li
262.552 150.301 li
254.242 150.519 li
245.932 150.759 li
237.622 151.023 li
229.312 151.316 li
221.002 151.645 li
212.692 152.015 li
204.382 152.437 li
196.072 152.918 li
187.762 153.47 li
179.452 154.109 li
171.142 154.846 li
162.832 155.697 li
154.522 156.68 li
146.212 157.806 li
137.902 159.091 li
129.592 160.543 li
121.282 162.167 li
112.972 163.966 li
104.662 165.931 li
112.972 164.242 li
121.282 162.748 li
129.592 161.448 li
137.902 160.336 li
146.212 159.4 li
154.522 158.623 li
162.832 157.99 li
171.142 157.48 li
179.452 157.075 li
187.762 156.756 li
196.072 156.507 li
204.382 156.313 li
212.692 156.162 li
221.002 156.043 li
229.312 155.947 li
237.622 155.868 li
245.932 155.8 li
254.242 155.739 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.156344 0 .308721 0 cmyk
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.125 216.668 mo
304.125 216.668 li
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.851 sep
@
91.125 216.668 mo
91.125 115.418 li
@
91.125 216.668 mo
88.995 216.668 li
@
91.125 191.356 mo
88.995 191.356 li
@
91.125 166.043 mo
88.995 166.043 li
@
91.125 140.731 mo
88.995 140.731 li
@
91.125 115.418 mo
88.995 115.418 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d73000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c7966770380ed0000884400005bec68656164dd56458f00000df00000
0036686865611233162100000e2800000024686d74785ac2fc0600000e4c
000035606c6f636104b6ca24000043ac000035646d61787012b305df0000
7910000000206e616d6528e6340c00007930000003547072657025d64dbf
00007c8400000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000050f5c359e56df5f0f3cf5081b080000000000a2e3272a00000000
c891c497faaffd671000080c00000009000100010000000000010000073e
fe4e00431000faaffa7a1000000100000000000000000000000000000d58
06000100000000000239000002390000023900b002d7005e047300150473
0049071d0077055600580187005a02aa007c02aa007c031d004004ac0072
023900aa02aa0041023900ba0239000004730055047300df0473003c0473
00560473001a047300550473004d047300610473005304730055023900b9
023900aa04ac007004ac007204ac00700473005a081f006f0556fffd0556
009605c7006605c7009e055600a204e300a80639006d05c700a4023900bf
04000037055600960473009606aa009805c7009c063900630556009e0639
005805c700a10556005c04e3003005c700a105560009078d001905560009
0556000604e300290239008b023900000239002703c100360473ffe102aa
00590473004a0473008604000050047300460473004b0239001304730042
0473008701c7008801c7ffa20400008801c7008306aa0087047300870473
0044047300870473004802aa00850400003f02390024047300830400001a
05c700060400000f040000210400002802ac0039021400bc02ac002f04ac
00570556fffd0556fffd05c70068055600a205c7009c0639006305c700a1
0473004a0473004a0473004a0473004a0473004a0473004a040000500473
004b0473004b0473004b0473004b023900bd023900230239ffe502390009
047300870473004404730044047300440473004404730044047300830473
0083047300830473008304730049033300800473006b0473001b04730051
02cd006d044c000104e3009905e5000305e50003080000e102aa00de02aa
003d0464004e080000010639005305b4009a0464004e0464004d0464004d
0473fffd049c00a003f4003805b4007a069600a1046400000231000002f6
002f02ec002d0625007f071d004404e3008104e3009e02aa00e804ac0072
046400540473002e0464003304e5001a047300860473008c080000ef0556
fffd0556fffd0639006308000081078d00520473fffc0800000002aa0053
02aa004701c7008001c7006c0464004e03f4002f04000021055600060156
fe390473ffe402aa005c02aa005c040000170400001704730049023900b9
01c7006c02aa0047080000250556fffd055600a20556fffd055600a20556
00a20239008d0239ffe00239000402390015063900630639006306390063
05c700a105c700a105c700a1023900c602aa001902aa000602aa001d02aa
002e02aa00e502aa00a202aa006b02aa003a02aa004b02aa002804730000
01c700030556005c0400003f04e3002904000028021400bc05c7fffd0473
004905560006040000210556009e0473008704ac007204ac00a102aa006b
02aa001902aa002106ac006b06ac006b06ac0021047300000639006d0473
0042023900b10556005c0400003f05c700660400005005c7006604000050
04730046046bffe102aa00ee0556fffd0473004a0556fffd0473004a05c7
009e04eb004705c7fffd055600a20473004b055600a20473004b04730096
01c7004204730096025500880473009a02ac008305c7009c0473008705c7
009c04730087063900630473004405c700a102aa008505c700a102aa003c
0556005c0400003f04e300300239002404e300300300002305c700a10473
008305c700a10473008304e300290400002804e3002904000028046800a4
063900600662005504a00048047400480391006204f000440329002e0530
0048046bffe1040000b002eb005208c000330800004f040000990800004f
040000990800004f040000980400009807d5016a05c0009e04ab007204d5
009d04ac007104d5022204d5010505abffe9050001c905ab027e05abffe9
05ab027e05abffe905ab027e05abffe905abffe905abffe905abffe905ab
ffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe9
05ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab
01c005ab01c005abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d50092
0800000007eb013007eb012007eb013007eb012004d500b204d5008004d5
002a082b0198086b01b807550010060000f40600006f0440003a05400037
04c0003f04150040040000250600005505e100bf038d008904d5ffd90180
008002d50086071500610296000f04d5009202d6008302d6008304d500b2
02d600700556fffd0473004a05c700660400005005c70066040000500556
00a20473004b055600a20473004b055600a20473004b0639006d04730042
0639006d047300420639006d0473004205c700a40473008705c7001f0473
00060239ffce0239ffce0239ffe40239ffe40239fff60239fff50239004b
01c700190400003701c7ffa20556009604000088040000860473009601c7
fffa05c7009c0473008705c900a50473008b063900630473004406390063
0473004405c700a102aa006b0556005c0400003f04e300300239000c05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
078d001905c70006055600060400002101c700890556fffd0473004a0800
0001071d00440639005304e30081023900b9078d001905c70006078d0019
05c70006078d001905c70006055600060400002101c7008a02aaffe10473
001b04cd005a06ac006b06ac002206ac002206ac004a02aa00e202aa006b
02aa00de02aaffea0557ffff0646ffa706b4ffa80312ffa80632ffa706d8
ffa70605ffa701c7ff780556fffd055600960558fffe055600a204e30029
05c700a4023900bf055600960558000b06aa009805c7009c0533006d0639
006305c700a40556009e04f2009404e30030055600060556000906af007f
05fb0061023900040556000604a00048039100620473008b01c7006b0460
0088049a008c04000019038700480473008b0473005c01c7008904000086
04000018049c00a00400001a0395005c04730044048d008303db00560460
00880433001105b4007a063f005701c7ffc9046000880473004804600088
063f0057055700a206eb0032045500a105c000640556005c023900bf0239
0004040000370875000d081500a406d5003104a900a10515000a05c000a0
0556fffd054000a705560096045500a1056b0000055600a20763000704d5
004e05c000a105c000a104a900a10540001206aa009805c700a406390063
05c000a00556009e05c7006604e300300515000a061500520556000905eb
009f05550057075500a1078000a106550000071500a8054000a505c00055
081500a405c7001a0473004a0495005b0440008802eb008804ab00000473
004b055afffb03ab003204780087047800870380008604ab00180580008c
046b00880473004404550088047300870400005003aa0026040000210695
004b0400000f0495008a042b0045066b008d0695008d0500002805c0008b
042b008404150030060000890455001f0473004b0473000002eb00890415
004b0400003f01c700880239000901c7ffa2074000130680008304730000
0380008604000021046b008803e900a1034a008808000041089500a00585
002d000001010000001e0000003100000031000001010000007e0000007e
0000008c0000008c000001010000001000000101000001210310007d0000
008c023300d20000030b0000ff04023900b9048100690456003203310019
0411002d04d1009601f9009b030f005f04ca009b04b8008c01f9009b0413
002803b0005003b4003c04ca009b04cf005001f9009b02d2003c0498005a
043c00190488006e045f007303b1001903d4000a0466009604130028058e
00640524002803f2009b03f2009b03f2009b01e3005a0356005a0686009b
01f9ffac041300280413002803b4ff5703b4ff570448002d058e0064058e
0064058e0064058e00640481006904810069048100690456003203310019
0411002d04d10096024b0000034a000004b8008c024b00000413002803b0
005003b4003c04cf005002d2003c0498005a0488006e045f007303d4000a
0466009604130028058e00640524002801f9009b0456003203b00050045f
0073049b003c0000ffdc0000ff250000ffdc0000fe51028d00ab028d00a0
02da0043034d007901a8ffba000000460000004600000046000000460000
00480000004600000046000000460435017c0435012e043500b704350081
0435012c043500be043500af043500810435009a043500db04350085028d
00c1043500b3060001000600010002420036060001000435009e04350098
043500cb0600010006000100060001000600010006000100000000460600
010006000100060001000600010006000100060001000600010006000100
051bffba06000100060001000600010005b5003a05b5003a01f4ffba01f4
ffba060001000600010006000100060001000481003604350036043dffba
043dffba03e9004a03e9004a067f0014077600140327ffba041effba067f
0014077600140327ffba041effba051b003204b500240300fff706000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010000000030
0000004600000046000000400000004606000100060001000000ffdc0000
fe510000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ff160000ffdc0000ff160000ffdc0000ff200000ffdc0473
004a08000000060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100060001000600010006000100028d
007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a80056
01d60010037500320375003201a8002d01d60013051b003204b5002401f4
ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4ffba
024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba02b3
005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba
06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a0036
0435ffba0327ffba064f0027064f00270224ffba021affba04a7004604a7
00460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d0047
040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba024200360300fff7039affba0327ffba
0375003203750032051b003204b50024051b003204b5002401f4ffba01f4
ffba045a004004ce0049045a002604ce0039045a005304ce004a045a0053
04ce004a0600010006000100000000460000004606000100060001000600
010000000046000000460600010006000100000000480000004606000100
060001000600010000000046000000460000004600000046000000400000
003006000100000000460000004606000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d00ca028d00c7028d
00c606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000100ffba0800ffba1000ffba06dc0063053f004406d5
00a1055b00830000fddc0000fc2f0000fca60000fe540000fcd70000fd73
0000fe290000fe0d0000fd110000fc670000fd9d0000fbf50000fc720000
fed50000fed50000ff02041b00a006ac006b06ac00190000feb60000fd73
0000fe080000fca60000fe530000fd110000fbc80000faf40000faaf0000
fc720000fbaa0000fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb98
0000fdea0000fe840000fdc20000fcf10000fd5f0000fe760000febc0000
fceb0000fd6c0000fd580000fc900000fd150000fc2c0000fc130000fc12
0000fb960000fb9601c700880556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b0239006301c7001f
023900ba01c7007c06390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406390063
0473004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004406dc0063053f004405c700a10473008305c700a104730083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
008306d500a1055b00830556000604000021055600060400002105560006
040000210556fffd0473004a0239ffe201c7ffb0063900630473004405c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a1047300830000fefe0000fefe0000fefe0000fefe0455fffd02eb
000c07630007055afffb04a900a10380008604a900a10380008605c700a4
046b00880473fffd040000140473fffd04000014055600090400000f0555
0057042b0045055500a10473008706050063047300550639006004730044
05b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4001001f4
001b01f4001001f4006b01f4fff90227ffce0000000f0000fff502aa00a4
02aa00a40000000e00000056000000560000ffcf01a8000f01d6ffbf01a8
fff501d6ffcd01a8001d01d6fff501a8009301d600130375003203750032
0375003203750032051b003204b5002405b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3003202b3003202b3005f02b3005f
02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f02b3
005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba064f0027064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba04a7004604a7004604a7004604a70046093e0032093e
00320740ffba0740ffba067f0014077600140327ffba041effba04cf002d
04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba040d0047040d004701a8ffba01a8ffba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba043500450435004501f4ffba01f4ffba043500450435
00450435004504350045043500450435004501f4ffba01f4ffba04350045
043500450481003604350036043dffba043dffba024200360300fff7031a
001a031a001a031a001a0375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032037500320375003203750032051bffba04b5ffba051b003204b50024
01f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba01f4
ffba051b003204b50024067f0045067f0045067f0045067f004501a80028
0000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e08fc
003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000ff9f
018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff580000
ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba045a002a039a00360435ffba0327ffba034d007902b400230242
003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4006d
067f00140776001401f9009b0000fed902bc000003f2009b045afff504ce
fff5045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a04350071043500ad045a
000f04ce000f0473001406110014054000a7047300860540000a0473000a
05c7005105c700660400005005c7fffd067a00140540004a047300460474
00480556006e04d5005304e3ffc40639006d04fe000f070c008701c70083
0239001f055600960400008801c7001504000018072000a405c7ffb80473
008b0639006006f200630557004406090014047300860556009e0556006b
0400004f04f20094030b00440239002404e300140239002404e3003005fb
006105c700a1062e00100400002104e300290400002804e3002904e30031
045c0044045c003f0473003c0473005503ab003203e50024047300870214
00bc034e00bc04ac0072023900b00aaa009e09c7009e08640046087f0096
06aa0096039c008309c7009c078e009c062b0087047300550556fffd0473
004a0000fefe0556fffd0473004a08000001071d00440639006d0473001a
0639006d0473004205560096040000880639006304730044063900630473
004404e30029045c004c01c7ffa20aaa009e09c7009e086400460639006d
04730042084600a404f2009e05c7009c047300870556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b0239ff8a0239ff64
023900040239fff60639006304730044063900630473004405c700a102aa
ffcc05c700a102aa006805c700a10473007605c700a1047300830556005c
0400003f04e3003002390024045c0051037e001305c700a40473008705a6
00a404d6005e0486005e04e30029040000280556fffd0473004a055600a2
0473004b06390063047300440000fefd0639006304730044063900630473
004406390063047300440556000604000021047300570473004804730086
04730086040000130400005004730046047300460473005505e9005503ab
004903ab0032050d0032040f00440239ffb9047300420473004204780050
0402001904ef00190473008b047300870473008701c7001901c7005702d9
0044029e0000026e001401c700830493008306aa008406aa008406aa0087
0473ffa60473008b046c00870473004406530044063f00570466004402aa
ffe402aaffe402aaffe402aa008502aa008502aa008502aaffe40455008a
0455008a0400003f01c7ffa20214ffb901c7ff7202cb00000239000f0239
002404730019048c0054046000880400001a05c700060400001804280019
0400002804540028045c004c045c00790400002404000050040000240400
00500639006304400088040f004904780050046b0088032e000004000008
033b008804730048040000240400005007b7004607400046080b004605b3
0024036f002405c00024061c0013054a0083050f008303e2001e04380063
03110064031100640146ffce01eb006401eb000001eb000002ea006403d9
0000029100000187005a02d7005e01c7008001c7006c01c7008a02aa00fb
02aa00fb02ca003202ca003204ac007004ac007004ac006504ac006502aa
012102aa00de02aa005902aa012102aa001d02aa005902aa00de023900b6
023900b602aa00fb02aa00fb02aa00a602aa00a602aa00a602aa001d02aa
ffe202aafffb029400000142006402b8003202a0000002ca003203100096
0310009603100096031000960310009602aa006202aa006202aa002802aa
001d02aa0047045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000fec1
0000fec60000fdac0000fed80000ff920000fee90000ff4c0000fea00000
fec40000ffce0000ff660000fea00000fed80000fed80000ff970000ff98
0000ff990000fff40000ff420000ff420000ff440000ff5f0000fe870000
ffec0000ffa60000ff510000ff510000ff510000fec90000ff1c00000000
0000fee90000ff4c0000ff930000ff2a0000ff560000ffce0000fe870000
febb0000fec40000fec40000fed80000fed80000feb30000fec90000fdad
0000fec80000feb30000fec90000fdad0000fe160000fee60000ffa60000
fe870000ff440000feba0000ff230000ff9a0000fdac0000fe8800000000
0000feb00000ff980000fe930000ffa60000fe870000fe1c0000ff660000
ff440000feb00000feb00000feb00000ff030000ff520000fd1f0000ff53
0000ff530000ff530000feb50000feb50000ffc30000feae0000fedc0000
fec70000fec80000fedc0000fe1e0000ff420000ff510000feb70000feb0
02aa00de02aa005902aa00fa049a007004600000062e001407aa0000062e
0014047b004c063f005704cf0044063900630473004405c7007004000050
04e300a8033b008804ff0000043c0032060d000a049d0042072000a406aa
0084056500630473008b056400a40400000a0556006b0556006b04e00005
04c5001905e5005f046e004403b600140347002804cf00440495005b0400
005001c7ffa2063900600389004d03890050055600a205c000a10473004b
047800870ab4006d04fe00100639001404e70014079900bf05b500880558
000104000006072e00bf0590008806a10078057b007a086d00bf06f00088
04d5006603ab001f065f0039058200480639006004730044066d0009050c
001a066d0009050c001a08980063072c004406aa002004e6001c0987006d
06d000500000fe370ab4006d04fe001005c7006604000050040700140000
fea60000febc0000ff980000ff980000fc2b0000fc4c05c000a104780087
05400004042b00140556009e04730087055d00a40464008804d5004e03ab
003204a900040380000005ef002904490028070900a4052f0088091800a0
06f600880606003e042b002305c700660400005004e3003003aa00260767
00310587002605550057042b004506e4000a0554000a06e4000a0554000a
023900bf07630007055afffb055700a1046800860540001204ab001805c7
00a4046b008805c700a4046b008805550057042b004506aa00980580008c
02aa002e0556fffd0473004a0556fffd0473004a08000001071d00440556
00a20473004b060500630473005507630007055afffb04d5004e03ab0032
04d5004e045c004c05c000a10478008705c000a104780087063900630473
0044063900600473004405c0004a0415002b0515000a040000210515000a
040000210515000a0400002105550057042b0045071500a805c0008b0540
004a0473004607bf004a0703004607a6006606860053054d006604130053
07c3001207470018084600a4070700880639006d0478005005f900300553
00260000ff430000fec90000ff770000ffb00000ff470000ff560000ff74
0000fed70000feac000000000000ff520000ff56000000000000feac0000
fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000ff7f
0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae0000
ff8c000001020000fefe0000fefe0000fedf0000fedf0000ff580000ff20
0000fefe0556fffd0473004a055600960473008605560096047300860556
00960473008605c700660400005005c7009e0473004605c7009e04730046
05c7009e0473004605c7009e0473004605c7009e04730046055600a20473
004b055600a20473004b055600a20473004b055600a20473004b055600a2
0473004b04e300a8023900130639006d0473004205c700a40473008705c7
00a40473008705c700a40473008705c700930473006805c700a404730087
0239ffdf01c7ff9202390020023900060556009604000088055600960400
008805560096040000880473009601c7007e0473009601c7ffb904730096
01c7ffa50473009601c7ffa306aa009806aa008706aa009806aa008706aa
009806aa008705c7009c0473008705c7009c0473008705c7009c04730087
05c7009c0473008706390063047300440639006304730044063900630473
004406390063047300440556009e047300870556009e0473008705c700a1
02aa008505c700a102aa008505c700a102aa005e05c700a102aa00260556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
0556005c0400003f04e300300239002404e300300239002404e300300239
ffff04e300300239000e05c700a10473008305c700a10473008305c700a1
0473008305c700a10473008305c700a104730083055600090400001a0556
00090400001a078d001905c70006078d001905c70006055600090400000f
055600090400000f055600060400002104e300290400002804e300290400
002804e3002904000028047300870239000305c70006040000210473004a
01c7008904a0004804a0004804a0004804a0004804a0004804a0004804a0
004804a000480556fffd0556fffd06820013068200130682001306820013
068200560682005603910062039100620391006203910062039100620391
0062061e0000061e0000076c0000076c0000076c0000076c00000473008b
0473008b0473008b0473008b0473008b0473008b0473008b0473008b068f
0000068f0000081f0000081f0000081f0000081f0000081ffff3081ffff3
01c7008101c7008101c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7
ffa20301000003010000049100000491000004910000049100000491fff3
0491fff3047300440473004404730044047300440473004404730044069d
0000069d0000082d0000082d000007c9000007c900000460008804600088
0460008804600088046000880460008804600088046000880682000007ae
00000812000007ae0006063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a000480391006203910062
0473008b0473008b01c7ffe601c700680473004404730044046000880460
0088063f0057063f005704a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd06820013068200130682
00130682001306820056068200560473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff3063f0057063f0057063f0057
063f0057063f0057063f0057063f0057063f0057065f0000065f000007ef
000007ef0000078b0000078b0000078bffff078bffff04a0004804a00048
04a0004804a0004804a0004804a0004804a000480556fffd0556fffd0556
fffd0556fffd0556fffd02aa00e502aa00fd02aa00e502aa000602aa0006
0473008b0473008b0473008b0473008b0473008b068200000682000006f3
000006f3000005c700a402aa001302aa001302aa000601c7ffbb01c7ffab
01c7ffca01c7ffca01c7ff9301c7ff930239001a0239fff5036500000365
000002aa001302aa001302aa000604600088046000880460008804600088
048d0083048d00830460008804600088055600060556000606e600000718
0000061e000002aaffea02aaffea02aa0059063f0057063f0057063f0057
063f0057063f005707650000069d000007270000065f000005fb006102aa
00de02aa00e50473000d05c7006605c7006606aa008705c70024095000a1
078d00190556001f04e30030080000290400003004c100660000ff530000
ff530000ff530000ff5301c7001901c7ffa2042b00050556001105740046
02cbffa3057a008702f0ffc8057f000a057f000a02aa008402aa008402aa
00c902aa00c902aa00a002aa005902aaffaf02aa003a02aa0006023900b9
02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a0000
ff730000ffa50000fed80000ff230000ff720000ff720000fee70000ffa5
0000ff530000ff530000ff530556009e0473008703f8001905fb0019071d
00440440001904000050046900870469001903eb008703ab003201c70088
0361004104000088033600100580008c04780087047300440400001304de
004404de004404de000d078d005003a800440473004404730044042b0084
0455001f0455001f03aa00260460008804c6004405de004404c600440400
001a05c700060400002803ab0032036b003f04db001f02eb00880400001a
04550088042b008405b4007a04ab001803a00000054f0000035100320351
ffd103980032034800320348003203f80032036e0032015600690284002d
0366003202d000320415003203710032036f003204180032030f00320359
0032039c003203760031036f003204fb000002fa003202fa003203040032
04cc0032030500640305003202f9003202f90032028c0032028c00320304
00320142006402b6006404950064030f00640305003202d5003203050032
030500320306006401c20032030f00640342003204950064029200000320
00000315006402920000030600320385003202bf00000142006401eb0064
030f0064029200000315006402920000030900320385003202bf000005ed
00460a660046061300460689ffba0541ffba01e9003c045a00110000ff0d
0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e0000
feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039affba
0327ffba05ad0069053d002d05fd009604dc005004e0003c05f6009b053f
00280650002804ac00720000fe3b0000fe660000fe660473fffc02aa0053
02d5ffce01a8ffba01a8ffba01a8ffba01a8ffba0658001509c500470400
000008000000040000000800000002ab0000020000000155000004730000
02390000019a000000ab00000000000005e5000305c7006606aa00980580
008c0744008307180046071800480556fffd05c70066040000140473000a
04e300300400004f0400002804a5001d000001020000ff420000febf0000
ff3a0000ff53048d000a05c7005105c7006605c70051045500a102eb0088
0000ff430000ff040000ffac02d200960000ff37021affba0250001e0000
ff3a0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a
05b5003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3003202b3003202b3
005f02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba
045a002a039a00360435ffba0327ffba045a002a039a00360435ffba0327
ffba045a002a039a00360435ffba0327ffba064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba02b4002302b400230327ffba0327ffba02b4002302b4
00230327ffba0327ffba043500450435004501f4ffba01f4ffba04350045
0435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d
0047040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0473ff93047300460239ffbf06aa
ffd50473ffb70473ff9102aaffa402aaffa40400ffff0239ffb904000028
04730089030b0064047400480649002401c7001901c700190473001e0460
001e048c000a04730086047300460239001305b400420400008801c7fffc
06aa00870473008b0473008702aafffb0400003f0318ffa20400001a0400
000f040000280473004a04730048047300460473004b03ab004903ab0032
0534005501c700880400001301c7ffa204730083045c004c0304006402d5
003202c9003302fc0032028c003201d5003201d500000304003203110064
01420019014200640142006401420019022a000001420064014200090233
00640493006404930064030fffc9030f0064030e00640305003203000032
02b800320142ffca01c20032030f001d031a00320306006402d400640292
000002de003202de003202de003202f4003202ea00320000febc0000febc
0000ff730000fea9023900b902fa003202f900320305003202a0000002f9
00320639006d0556fffd0473000f05c7006602aa004104a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a0004801c7ff9b01c7
ffab01c7ff9b01c7ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb04600088
0460008804600088046000880460008804600088046000880460008801c7
ffab01c7ffab01c7ffbb01c7ffbb04600088046000880460008804600088
045a005304ce004a03a000130556001105c700290558000b055600a20473
004b0400003301c7ffa205e600630473004805c7000002aa000f05560006
0400002104000013040000500400001301c700830455fffd02eb00010556
00090400000f055600090400000f04d5005303ab00490540001204ab0018
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff720000
ff730000fee7078b000a03eb004c040000130473000a01c700150473fff4
0556001105c700a1047300190239ff8b05c700a404730087055600960400
008804e30029040000280400003b049e00a403670088053000480000ff53
0000ffbc0000fefe0000fefe0000fea40000fea401c7008805c900a505c7
009c05c900a50000fecd0000ff480000fec90000fece0000fec50000fed0
0000fed10000feee0000fed60000fedc0000fdd90639005804730048078d
001905c70006059f00a40000feb905dc006304c60009084c001906ba0006
023900b9038000720187005a0187005a0400009904000099023900b00239
00b0023900b002aa001904e30030000000000000002a0000002a0000002a
0000002a0000002a0000002a0000002a0000002a000001d2000001d20000
01d200000252000002f8000002f800000360000003d80000041e0000045a
000004ca00000686000007620000098c00000b6600000cc600000e800000
10560000110200001396000015ca000015ca000015ca0000164c000016bc
000017420000174200001742000018ec00001a8400001bbe00001d060000
1dca00001e800000201000002116000021fa000022e2000022e2000022e2
0000260c000027b6000028ea000029f000002be400002e50000030fa0000
31a8000031a8000031a8000033e6000033e6000033e6000033e6000033e6
000033e6000033e6000033e6000033e6000033e6000036b8000036b80000
386c00003a2000003bde00003d3200003f22000040c6000041ba000042d2
0000456a000046660000489600004a5c00004c1e00004de200004de20000
4ee800005290000053b40000555200005770000057700000599400005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec00005bec00005bec00005bec00005bec00005bec00005bec00005bec
00005bec00005bec00005bec00005bec00005bec00005bec00005bec0000
5bec000100000d5800f2003c009d000700020010002f0056000004ac041d
000500020000000e00ae0000000300000000006a00000000000300000007
0062006a0001000000000000003500cc0001000000000003000e01010001
000000000004000e010f0001000000000006000e011d0001000000000007
0031012b0003000104090000006a015c0003000104090001001c01c60003
000104090002000e01e20003000104090003001c01f00003000104090004
001c020c0003000104090006001c022800030001040900070062024400a9
0020003200300031003000200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e0041007200690061006c002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e002ea920323031302054
6865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c2052
69676874732052657365727665642e5452455845522b417269616c4d5454
52455845522b417269616c4d545452455845522b417269616c4d54417269
616c20697320612074726164656d61726b206f6620546865204d6f6e6f74
79706520436f72706f726174696f6e2e00a9002000320030003100300020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e005400520045005800450052002b0041007200690061006c004d0054
0052006500670075006c00610072005400520045005800450052002b0041
007200690061006c004d0054005400520045005800450052002b00410072
00690061006c004d0054005400520045005800450052002b004100720069
0061006c004d00540041007200690061006c002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00>
<b900540328b326181fd0bc032900e0032900020329b22b1d1fb90327031d
b23b1f40b80323b31215320f412d03200001002f0320000100200320006f
032000af032000bf03200004005f031e00010010031e007f031e0080031e
00af031e00bf031e00d0031e00060000031e0010031e0020031e006f031e
009f031e00e0031e0006031d031cb2201f1041270319007f03190002000f
031700ef031700ff03170003001f0317002f0317004f0317005f0317008f
0317009f03170006000f0317005f0317006f0317007f031700bf031700f0
0317000600400317b2923340b80317b28b3340b80317b36a6c3240b80317
b2613340b80317b35c5d3240b80317b357593240b80317b34d513240b803
17b344493240b80317b23a3340b80317b331343240b80317b32e423240b8
0317b3272c3240b80317b312253280b80317b30a0d32c04116031600d003
16000200700316000102c4000f0101001f00a0031500b003150002030600
0f0101001f00400312b32426329fbf03040001030203010064001fffc003
01b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e11
329f414a02e200af02e200bf02e2000302e202e202e102e1007f02e00001
001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e0
02df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf
02dd00ef02dd000702dd02dd001002dc0001000002dc0001001002dc003f
02dc000202dc02dc001002db000102db02db000f02da000102da02daffc0
02d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2
171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb03
22003e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002d4
00b002d40002000002d4001002d4002002d4005002d4006002d4007002d4
0006006002d6007002d6008002d6009002d600a002d600b002d600060000
02d6001002d6002002ca002002cc002002d6003002d6004002d6005002d6
000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c800
17001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02
c6b21e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1b3
24121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf
008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e90800
001f02a600a20800406a1f4026434932402043493240263a3d3240203a3d
329f209f26024026969932402096993240268e923240208e92324026848c
324020848c3240267a813240207a813240266c763240206c76324026646a
324020646a3240265a5f3240205a5f3240264f543240204f5432b8029eb7
24271f374f6b0120410f0277003002770040027700500277000402770277
027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc018052
0180a201806501807e01808101803c01805e01802b01801c01801e018040
0180bb0138000100800140b40180400180bb013800010080013940180180
ca0180ad018073018026018025018024018020013740b80221b2493340b8
0221b2453340b80221b341423240b80221b33d3e320f410f0221003f0221
007f0221000300bf022100cf022100ff0221000300400221b320223240b8
0221b3191e3240b80222b32a3f3240b80221b32e3a326f414802c3007f02
c3008f02c300df02c30004002f02c3006002c300cf02c30003000f02c300
3f02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f02
220001000f0222002f0222003f0222005f0222007f022200ef0222000600
bf022100ef02210002006f0221007f022100af02210003002f0221003f02
21004f0221000302c302c30222022202210221401d101c102b1048038f1c
010f1e014f1eff1e023700161600000012110811b8010db6f70df8f70d00
094109028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226
bb1f41150197001e0401001f013900260125001f013800730401001f0135
001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e
001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51c
b802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61f
b91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b
1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f44
1c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301c
bb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b8
0168402c07960758074f07360732072c0721071f071d071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b
58b101018e59b0382bb00288b801005458b801ffb101018e851bb0124358
b900010111858d1bb900010128858d5959001816763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b
2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa
1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f0
45445958b9033e01f2455258b901f2033e4459594bb8015653205c58b900
2001f14544b9002601f145445958b9081e0020455258b90020081e445959
4bb8019a53205c58b9002501f24544b9002401f245445958b90909002545
5258b9002509094459594bb8040153205c58b173244544b1242445445958
b917200073455258b9007317204459594bb8040153205c58b1ca254544b1
252545445958b9168000ca455258b900ca16804459594bb03e53205c58b1
1c1c4544b11e1c45445958b9011a001c455258b9001c011a4459594bb056
53205c58b11c1c4544b12f1c45445958b90189001c455258b9001c018944
59594bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258
b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45
6523456023456560234560b08b766818b080622020b163594565234520b0
03266062636820b003266165b059236544b063234420b13b5c4565234520
b003266062636820b003266165b05c236544b03b2344b1005c455458b15c
406544b23b403b4523614459b347503437456523456023456560234560b0
89766818b080622020b134504565234520b003266062636820b003266165
b050236544b034234420b147374565234520b003266062636820b0032661
65b037236544b0472344b10037455458b137406544b24740474523614459
004b5342014b5058b108004259435c58b108004259b3020b0a124358601b
2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
7475737500184569444569444569447373737374757374752b2b2b2b7475
2b2b2b2b2b73737373737373737373737373737373737373737373737373
2b2b2b45b0406144737400004bb02a534bb03f515a58b1070745b0406044
59004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a
515a58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc0
6044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b43
5c58b9008002bbb301401e017400735903b01e4b5402b0124b545ab01243
5c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b73
7373732b2b2b2b2b002b2b2b2b2b2b004569447345694473456944737475
456944734569444569444569447374456944456944732b2b2b2b2b732b00
2b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b737475737475
2b2b2b742b2b000000>
[14881 8653 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 984 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>PBAAAA+ArialMT AddT42Char 
2 1054 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>PBAAAA+ArialMT AddT42Char 
2 1226 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>PBAAAA+ArialMT AddT42Char 
2 2918 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>PBAAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/hyphen 16 def
/period 17 def
/zero 19 def
/four 23 def
end
PBAAAA+ArialMT /Encoding get
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/SZNKAS+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero 3{/.notdef}rp /four 203{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
70.1455 220.417 mo
(-0.4)
[3.32986 5.55989 2.77994 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 1890 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/two 21 def
end
SZNKAS+ArialMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef 
/four 203{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
70.1455 195.107 mo
(-0.2)
[3.32986 5.55989 2.77994 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
80.4153 169.798 mo
(0)sh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
73.2154 144.488 mo
(0.2)
[5.55988 2.77995 0 ]xsh
1 /0 /CSD get_res sepcs
.851 sep
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
73.2154 119.179 mo
(0.4)
[5.55988 2.77995 0 ]xsh
91.125 165.793 mo
93.1249 165.793 li
93.1249 166.293 li
91.125 166.293 li
91.125 165.793 li
95.1251 165.793 mo
97.125 165.793 li
97.125 166.293 li
95.1251 166.293 li
95.1251 165.793 li
99.1249 165.793 mo
101.125 165.793 li
101.125 166.293 li
99.1249 166.293 li
99.1249 165.793 li
103.125 165.793 mo
105.125 165.793 li
105.125 166.293 li
103.125 166.293 li
103.125 165.793 li
107.125 165.793 mo
109.125 165.793 li
109.125 166.293 li
107.125 166.293 li
107.125 165.793 li
111.125 165.793 mo
113.125 165.793 li
113.125 166.293 li
111.125 166.293 li
111.125 165.793 li
115.125 165.793 mo
117.125 165.793 li
117.125 166.293 li
115.125 166.293 li
115.125 165.793 li
119.125 165.793 mo
121.125 165.793 li
121.125 166.293 li
119.125 166.293 li
119.125 165.793 li
123.125 165.793 mo
125.125 165.793 li
125.125 166.293 li
123.125 166.293 li
123.125 165.793 li
127.125 165.793 mo
129.125 165.793 li
129.125 166.293 li
127.125 166.293 li
127.125 165.793 li
131.125 165.793 mo
133.125 165.793 li
133.125 166.293 li
131.125 166.293 li
131.125 165.793 li
135.125 165.793 mo
137.125 165.793 li
137.125 166.293 li
135.125 166.293 li
135.125 165.793 li
139.125 165.793 mo
141.125 165.793 li
141.125 166.293 li
139.125 166.293 li
139.125 165.793 li
143.125 165.793 mo
145.125 165.793 li
145.125 166.293 li
143.125 166.293 li
143.125 165.793 li
147.125 165.793 mo
149.125 165.793 li
149.125 166.293 li
147.125 166.293 li
147.125 165.793 li
151.125 165.793 mo
153.125 165.793 li
153.125 166.293 li
151.125 166.293 li
151.125 165.793 li
155.125 165.793 mo
157.125 165.793 li
157.125 166.293 li
155.125 166.293 li
155.125 165.793 li
159.125 165.793 mo
161.125 165.793 li
161.125 166.293 li
159.125 166.293 li
159.125 165.793 li
163.125 165.793 mo
165.125 165.793 li
165.125 166.293 li
163.125 166.293 li
163.125 165.793 li
167.125 165.793 mo
169.125 165.793 li
169.125 166.293 li
167.125 166.293 li
167.125 165.793 li
171.125 165.793 mo
173.125 165.793 li
173.125 166.293 li
171.125 166.293 li
171.125 165.793 li
175.125 165.793 mo
177.125 165.793 li
177.125 166.293 li
175.125 166.293 li
175.125 165.793 li
179.125 165.793 mo
181.125 165.793 li
181.125 166.293 li
179.125 166.293 li
179.125 165.793 li
183.125 165.793 mo
185.125 165.793 li
185.125 166.293 li
183.125 166.293 li
183.125 165.793 li
187.125 165.793 mo
189.125 165.793 li
189.125 166.293 li
187.125 166.293 li
187.125 165.793 li
191.125 165.793 mo
193.125 165.793 li
193.125 166.293 li
191.125 166.293 li
191.125 165.793 li
195.125 165.793 mo
197.125 165.793 li
197.125 166.293 li
195.125 166.293 li
195.125 165.793 li
199.125 165.793 mo
201.125 165.793 li
201.125 166.293 li
199.125 166.293 li
199.125 165.793 li
203.125 165.793 mo
205.125 165.793 li
205.125 166.293 li
203.125 166.293 li
203.125 165.793 li
207.125 165.793 mo
209.125 165.793 li
209.125 166.293 li
207.125 166.293 li
207.125 165.793 li
211.125 165.793 mo
213.125 165.793 li
213.125 166.293 li
211.125 166.293 li
211.125 165.793 li
215.125 165.793 mo
217.125 165.793 li
217.125 166.293 li
215.125 166.293 li
215.125 165.793 li
219.125 165.793 mo
221.125 165.793 li
221.125 166.293 li
219.125 166.293 li
219.125 165.793 li
223.125 165.793 mo
225.125 165.793 li
225.125 166.293 li
223.125 166.293 li
223.125 165.793 li
227.125 165.793 mo
229.125 165.793 li
229.125 166.293 li
227.125 166.293 li
227.125 165.793 li
231.125 165.793 mo
233.125 165.793 li
233.125 166.293 li
231.125 166.293 li
231.125 165.793 li
235.125 165.793 mo
237.125 165.793 li
237.125 166.293 li
235.125 166.293 li
235.125 165.793 li
239.125 165.793 mo
241.125 165.793 li
241.125 166.293 li
239.125 166.293 li
239.125 165.793 li
243.125 165.793 mo
245.125 165.793 li
245.125 166.293 li
243.125 166.293 li
243.125 165.793 li
247.125 165.793 mo
249.125 165.793 li
249.125 166.293 li
247.125 166.293 li
247.125 165.793 li
251.125 165.793 mo
253.125 165.793 li
253.125 166.293 li
251.125 166.293 li
251.125 165.793 li
255.125 165.793 mo
257.125 165.793 li
257.125 166.293 li
255.125 166.293 li
255.125 165.793 li
259.125 165.793 mo
261.125 165.793 li
261.125 166.293 li
259.125 166.293 li
259.125 165.793 li
263.125 165.793 mo
265.125 165.793 li
265.125 166.293 li
263.125 166.293 li
263.125 165.793 li
267.125 165.793 mo
269.125 165.793 li
269.125 166.293 li
267.125 166.293 li
267.125 165.793 li
271.125 165.793 mo
273.125 165.793 li
273.125 166.293 li
271.125 166.293 li
271.125 165.793 li
275.125 165.793 mo
277.125 165.793 li
277.125 166.293 li
275.125 166.293 li
275.125 165.793 li
279.125 165.793 mo
281.125 165.793 li
281.125 166.293 li
279.125 166.293 li
279.125 165.793 li
283.125 165.793 mo
285.125 165.793 li
285.125 166.293 li
283.125 166.293 li
283.125 165.793 li
287.125 165.793 mo
289.125 165.793 li
289.125 166.293 li
287.125 166.293 li
287.125 165.793 li
291.125 165.793 mo
293.125 165.793 li
293.125 166.293 li
291.125 166.293 li
291.125 165.793 li
295.125 165.793 mo
297.125 165.793 li
297.125 166.293 li
295.125 166.293 li
295.125 165.793 li
299.125 165.793 mo
301.125 165.793 li
301.125 166.293 li
299.125 166.293 li
299.125 165.793 li
303.125 165.793 mo
304.125 165.793 li
304.125 166.293 li
303.125 166.293 li
303.125 165.793 li
1 /0 /CSD get_res sepcs
1 sep
f
144.375 376.918 mo
144.375 379.048 li
1 /0 /CSD get_res sepcs
.851 sep
@
197.625 376.918 mo
197.625 379.048 li
@
250.875 376.918 mo
250.875 379.048 li
@
304.125 376.918 mo
304.125 379.048 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 5014 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/nine 28 def
end
SZNKAS+ArialMT /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef 
/four 4{/.notdef}rp /nine 198{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
85.1245 389.797 mo
(-90)
[3.32986 5.55989 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 3270 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/five 24 def
end
SZNKAS+ArialMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef 
/four /five 3{/.notdef}rp /nine 198{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
136.753 389.797 mo
(-45)
[3.32986 5.55988 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
195.002 389.797 mo
(0)sh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
245.251 389.797 mo
(45)
[5.55989 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
297.5 389.797 mo
(90)
[5.55988 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 1670 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/one 20 def
end
SZNKAS+ArialMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 198{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
77.3446 380.667 mo
(-1)
[3.32986 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
80.4146 313.038 mo
(0)sh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
73.2147 279.409 mo
(0.5)
[5.55988 2.77995 0 ]xsh
355.625 216.668 mo
569.375 216.668 li
@
355.625 216.668 mo
355.625 115.418 li
@
355.625 216.668 mo
353.487 216.668 li
@
355.625 191.356 mo
353.487 191.356 li
@
355.625 166.043 mo
353.487 166.043 li
@
355.625 140.731 mo
353.487 140.731 li
@
355.625 115.418 mo
353.487 115.418 li
@
355.625 165.793 mo
357.625 165.793 li
357.625 166.293 li
355.625 166.293 li
355.625 165.793 li
359.625 165.793 mo
361.625 165.793 li
361.625 166.293 li
359.625 166.293 li
359.625 165.793 li
363.625 165.793 mo
365.625 165.793 li
365.625 166.293 li
363.625 166.293 li
363.625 165.793 li
367.625 165.793 mo
369.625 165.793 li
369.625 166.293 li
367.625 166.293 li
367.625 165.793 li
371.625 165.793 mo
373.625 165.793 li
373.625 166.293 li
371.625 166.293 li
371.625 165.793 li
375.625 165.793 mo
377.625 165.793 li
377.625 166.293 li
375.625 166.293 li
375.625 165.793 li
379.625 165.793 mo
381.625 165.793 li
381.625 166.293 li
379.625 166.293 li
379.625 165.793 li
383.625 165.793 mo
385.625 165.793 li
385.625 166.293 li
383.625 166.293 li
383.625 165.793 li
387.625 165.793 mo
389.625 165.793 li
389.625 166.293 li
387.625 166.293 li
387.625 165.793 li
391.625 165.793 mo
393.625 165.793 li
393.625 166.293 li
391.625 166.293 li
391.625 165.793 li
395.625 165.793 mo
397.625 165.793 li
397.625 166.293 li
395.625 166.293 li
395.625 165.793 li
399.625 165.793 mo
401.625 165.793 li
401.625 166.293 li
399.625 166.293 li
399.625 165.793 li
403.625 165.793 mo
405.625 165.793 li
405.625 166.293 li
403.625 166.293 li
403.625 165.793 li
407.625 165.793 mo
409.625 165.793 li
409.625 166.293 li
407.625 166.293 li
407.625 165.793 li
411.625 165.793 mo
413.625 165.793 li
413.625 166.293 li
411.625 166.293 li
411.625 165.793 li
415.625 165.793 mo
417.625 165.793 li
417.625 166.293 li
415.625 166.293 li
415.625 165.793 li
419.625 165.793 mo
421.625 165.793 li
421.625 166.293 li
419.625 166.293 li
419.625 165.793 li
423.625 165.793 mo
425.625 165.793 li
425.625 166.293 li
423.625 166.293 li
423.625 165.793 li
427.625 165.793 mo
429.625 165.793 li
429.625 166.293 li
427.625 166.293 li
427.625 165.793 li
431.625 165.793 mo
433.625 165.793 li
433.625 166.293 li
431.625 166.293 li
431.625 165.793 li
435.625 165.793 mo
437.625 165.793 li
437.625 166.293 li
435.625 166.293 li
435.625 165.793 li
439.625 165.793 mo
441.625 165.793 li
441.625 166.293 li
439.625 166.293 li
439.625 165.793 li
443.625 165.793 mo
445.625 165.793 li
445.625 166.293 li
443.625 166.293 li
443.625 165.793 li
447.625 165.793 mo
449.625 165.793 li
449.625 166.293 li
447.625 166.293 li
447.625 165.793 li
451.625 165.793 mo
453.625 165.793 li
453.625 166.293 li
451.625 166.293 li
451.625 165.793 li
455.625 165.793 mo
457.625 165.793 li
457.625 166.293 li
455.625 166.293 li
455.625 165.793 li
459.625 165.793 mo
461.625 165.793 li
461.625 166.293 li
459.625 166.293 li
459.625 165.793 li
463.625 165.793 mo
465.625 165.793 li
465.625 166.293 li
463.625 166.293 li
463.625 165.793 li
467.625 165.793 mo
469.625 165.793 li
469.625 166.293 li
467.625 166.293 li
467.625 165.793 li
471.625 165.793 mo
473.625 165.793 li
473.625 166.293 li
471.625 166.293 li
471.625 165.793 li
475.625 165.793 mo
477.625 165.793 li
477.625 166.293 li
475.625 166.293 li
475.625 165.793 li
479.625 165.793 mo
481.625 165.793 li
481.625 166.293 li
479.625 166.293 li
479.625 165.793 li
483.625 165.793 mo
485.625 165.793 li
485.625 166.293 li
483.625 166.293 li
483.625 165.793 li
487.625 165.793 mo
489.625 165.793 li
489.625 166.293 li
487.625 166.293 li
487.625 165.793 li
491.625 165.793 mo
493.625 165.793 li
493.625 166.293 li
491.625 166.293 li
491.625 165.793 li
495.625 165.793 mo
497.625 165.793 li
497.625 166.293 li
495.625 166.293 li
495.625 165.793 li
499.625 165.793 mo
501.625 165.793 li
501.625 166.293 li
499.625 166.293 li
499.625 165.793 li
503.625 165.793 mo
505.625 165.793 li
505.625 166.293 li
503.625 166.293 li
503.625 165.793 li
507.625 165.793 mo
509.625 165.793 li
509.625 166.293 li
507.625 166.293 li
507.625 165.793 li
511.625 165.793 mo
513.625 165.793 li
513.625 166.293 li
511.625 166.293 li
511.625 165.793 li
515.625 165.793 mo
517.624 165.793 li
517.624 166.293 li
515.625 166.293 li
515.625 165.793 li
519.625 165.793 mo
521.625 165.793 li
521.625 166.293 li
519.625 166.293 li
519.625 165.793 li
523.624 165.793 mo
525.624 165.793 li
525.624 166.293 li
523.624 166.293 li
523.624 165.793 li
527.625 165.793 mo
529.625 165.793 li
529.625 166.293 li
527.625 166.293 li
527.625 165.793 li
531.624 165.793 mo
533.625 165.793 li
533.625 166.293 li
531.624 166.293 li
531.624 165.793 li
535.625 165.793 mo
537.624 165.793 li
537.624 166.293 li
535.625 166.293 li
535.625 165.793 li
539.624 165.793 mo
541.624 165.793 li
541.624 166.293 li
539.624 166.293 li
539.624 165.793 li
543.624 165.793 mo
545.624 165.793 li
545.624 166.293 li
543.624 166.293 li
543.624 165.793 li
547.624 165.793 mo
549.624 165.793 li
549.624 166.293 li
547.624 166.293 li
547.624 165.793 li
551.624 165.793 mo
553.624 165.793 li
553.624 166.293 li
551.624 166.293 li
551.624 165.793 li
555.624 165.793 mo
557.624 165.793 li
557.624 166.293 li
555.624 166.293 li
555.624 165.793 li
559.624 165.793 mo
561.624 165.793 li
561.624 166.293 li
559.624 166.293 li
559.624 165.793 li
563.624 165.793 mo
565.624 165.793 li
565.624 166.293 li
563.624 166.293 li
563.624 165.793 li
567.624 165.793 mo
569.375 165.793 li
569.375 166.293 li
567.624 166.293 li
567.624 165.793 li
1 /0 /CSD get_res sepcs
1 sep
f
.697749 .673732 .640589 .739681 cmyk
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PIABAA+ArialMT)
%%Title: (PIABAA+ArialMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PIABAA+ArialMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-665 -325 2000 1006} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3416 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 20 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
3 <001C60D8A8C9B854D00D> |
80 <001C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519A
D5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD
99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176A
FB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D5
5C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE3
7B> |
68 <001C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA
7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883
CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DB
BA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405
FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5
CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D
53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307
B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D1
77B5D88A> |
86 <001C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B
5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214
E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEAB
D96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046
E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB
3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8
435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F
4172D53C8FCAF4D28F2B78D3A4BF03> |
78 <001C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A
320C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |
76 <001C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B
171C8A80AB> |
81 <001C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A28
5C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCD
ADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5
203A8015DD09B7CE> |
74 <001C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817
A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D
559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0
C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667
DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FB
D88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF
575C72F67F4BEBB98F8AFA57505EC9> |
71 <001C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D962
1458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6
DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB6
12941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF
13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |
72 <001C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449
B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C
8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0E
EA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37
295284C077711C162623860AACA404F650F8D516970257> |
91 <001C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E16
29C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDA
FEAD7BE7BD65F1051699CCF4B0> |
11 <001C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D30
2C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC2
35F833AFCC30669C812FBF097879E1> |
83 <001C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B9
6470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F43633
0DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F5
56CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672
C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |
82 <001C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A
987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C84
6C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD
79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC09
9F518C54BB58C51D6FB6D0C8> |
87 <001C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D
065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349
CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB512
7F5C42C88FB43C> |
237 <001C60D8A8C9B7F374869C4D14FD697FCCAF1C53E703093C> |
85 <001C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857
894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619
ADD420F549AB7C795751D32E8EE6> |
12 <001C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE
4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52A
BD0227B6CDD854C568D5A6F3817645C5> |
168 <001C60D8A8C9B7D7E8D3771485267A9081A4F480AD8CEEAA573F98757BF
AA0F3C0CC30E5324472> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PIABAA+ArialMT-Identity-H /Identity-H 0 [/PIABAA+ArialMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/SZNKAT+ArialMT /PIABAA+ArialMT-Identity-H findfont ct_VMDictPut
SZNKAT+ArialMT [0 -10 -10 0 0 0 ]msf
58.0771 222.596 mo
(\000\003\000P\000D\000V\000N\000L\000Q\000J\000\003\000L\000Q\000G\000H\000[\000\003\000\013\000S\000R\000V\000W\000\355\000S\000U\000H\000\014)
[-2.78003 -8.3299 -5.56 -5 -5 -2.21997 -5.56006 -5.55994 -2.78003 -2.21997 -5.56006 -5.55994 
-5.56006 -5 -2.77997 -3.3299 -5.56006 -5.55994 -5 -2.78003 -5.83997 -5.56006 -3.3299 -5.56 
0 ]ysh
58.0771 226.686 mo
(\000\250)sh
58.0771 382.306 mo
(\000\003\000P\000D\000V\000N\000L\000Q\000J\000\003\000L\000Q\000G\000H\000[\000\003\000\013\000S\000R\000V\000W\000\355\000S\000U\000H\000\014)
[-2.78 -8.32993 -5.56 -5 -5 -2.22 -5.56 -5.56 -2.78 -2.22 -5.56 -5.56 
-5.56 -5 -2.78 -3.32993 -5.56 -5.56 -5 -2.78 -5.84 -5.55997 -3.32996 -5.56 
0 ]ysh
58.0771 386.396 mo
(\000\250)sh
1 /0 /CSD get_res sepcs
.851 sep
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 3 GetGlyphDirectory
48 <001C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AF
B379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE
8F80AF5A83421F8F> |
70 <001C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0ED
CE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9
F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF3414
8C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36
548FE63FC8465B1B685766E782F0> |
8 <001C60D8A8C9B59F85E0DAE049DF5400FEC4D0F8EFBB52A794092230A72D7
DDFAEB104EF27289C7A718241B806C975E93A1C75FAB2AB14E2A41AABFA40106
4DD7C7601B5CEF9B44E6E5682565718CE9083F91297B631654C992324F9A0BDB
4D7D87F76BE4F94F142F746E26C71DDE74C7BF9585CC13A09469724AA344945B
569B0FB415021010E90C3107A0803BCE8988A410C7939294480777D58961A6E1
70A7CDE3DAA0882DCD986E1F7B72319EC21DE481ECC36E4986C9E8860671246A
8D025F0AB275EDE7E18CBB7C91C73156434618A11E0A8CB4320EEAD41F234498
555E467EEFA43A3A97E67C97385880DF9AC3142F67EE844C46F0A5F81E46166A
68F5C428FAF89F547A11FD7641D5E347705A7> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [10 0 0 -10 0 0 ]msf
155.974 240.129 mo
(\0000\000D\000V\000N\000\003\000F\000R\000Q\000W\000U\000D\000V\000W\000\003\000\013\000\010\000\014)
[8.32993 5.56 5 5 2.78 5 5.56 5.56 2.78 3.32993 5.56 5 
2.78 2.78 3.32993 8.89008 0 ]xsh
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 2 GetGlyphDirectory
50 <001C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170
AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C5848
2F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5
380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2
E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA7
62289BE1> |
73 <001C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C
5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61
CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [10 0 0 -10 0 0 ]msf
133.444 406.629 mo
(\0002\000U\000L\000H\000Q\000W\000D\000W\000L\000R\000Q\000\003\000S\000U\000H\000I\000H\000U\000H\000Q\000F\000H\000\003\000\013\000G\000H\000J\000\014)
[7.78 3.32993 2.22 5.56 5.56 2.78 5.56 2.78 2.22 5.56 5.56 2.78 
5.56 3.32993 5.56 2.78 5.56 3.32993 5.56 5.56 5 5.56 2.78 3.32993 
5.56 5.56 5.56 0 ]xsh
1 /0 /CSD get_res sepcs
.851 sep
SZNKAT+ArialMT [10 0 0 -10 0 0 ]msf
399.344 406.629 mo
(\0002\000U\000L\000H\000Q\000W\000D\000W\000L\000R\000Q\000\003\000S\000U\000H\000I\000H\000U\000H\000Q\000F\000H\000\003\000\013\000G\000H\000J\000\014)
[7.78 3.32993 2.22 5.56 5.56 2.78 5.56 2.78 2.22 5.56 5.56 2.78 
5.56 3.32993 5.56 2.78 5.56 3.32993 5.56 5.56 5 5.56 2.78 3.32993 
5.56 5.56 5.56 0 ]xsh
133.652 164.491 mo
133.622 163.992 li
142.126 163.467 li
142.123 163.467 li
150.63 162.9 li
150.628 162.901 li
159.134 162.301 li
167.637 161.676 li
176.142 161.033 li
184.647 160.377 li
193.152 159.717 li
201.658 159.056 li
210.164 158.399 li
218.669 157.75 li
227.174 157.112 li
235.682 156.488 li
244.188 155.878 li
252.693 155.286 li
252.694 155.286 li
261.202 154.714 li
269.708 154.162 li
278.213 153.63 li
286.719 153.119 li
295.228 152.63 li
303.737 152.162 li
303.769 152.161 li
303.788 152.66 li
303.288 152.66 li
303.288 151.187 li
303.288 151.183 li
303.788 151.183 li
303.807 151.683 li
303.786 151.684 li
295.286 152.194 li
295.287 152.194 li
286.781 152.727 li
286.782 152.727 li
278.277 153.287 li
278.278 153.287 li
269.774 153.87 li
261.271 154.477 li
252.764 155.108 li
244.261 155.759 li
244.263 155.759 li
235.758 156.431 li
235.759 156.431 li
227.221 157.124 li
218.749 157.829 li
210.245 158.55 li
201.739 159.28 li
193.233 160.015 li
184.728 160.751 li
176.222 161.483 li
167.686 162.205 li
159.21 162.904 li
150.703 163.576 li
142.194 164.212 li
133.687 164.802 li
133.684 164.802 li
125.169 165.336 li
116.66 165.803 li
108.158 166.195 li
99.6476 166.506 li
99.6131 165.507 li
108.119 165.231 li
108.115 165.231 li
116.619 164.882 li
116.615 164.882 li
125.121 164.467 li
133.624 163.992 li
133.622 163.992 li
133.652 164.491 li
133.68 164.99 li
125.173 165.466 li
116.656 165.881 li
108.156 166.23 li
99.6454 166.506 li
99.6111 165.507 li
108.117 165.196 li
108.112 165.196 li
116.616 164.804 li
116.612 164.804 li
125.118 164.337 li
125.114 164.337 li
133.621 163.804 li
133.618 163.804 li
142.122 163.214 li
150.626 162.579 li
150.624 162.579 li
159.13 161.907 li
167.632 161.206 li
167.631 161.206 li
176.137 160.487 li
184.642 159.755 li
193.147 159.019 li
201.653 158.284 li
210.16 157.553 li
218.665 156.832 li
227.17 156.125 li
227.171 156.125 li
235.678 155.434 li
235.679 155.434 li
244.184 154.762 li
244.185 154.762 li
252.689 154.111 li
261.198 153.48 li
269.705 152.872 li
269.706 152.872 li
278.21 152.29 li
278.211 152.289 li
286.716 151.729 li
295.225 151.196 li
295.226 151.196 li
303.734 150.685 li
303.769 150.684 li
304.288 150.664 li
304.288 151.187 li
304.288 153.141 li
303.781 153.161 li
303.761 152.661 li
303.789 153.161 li
295.284 153.628 li
286.778 154.117 li
286.779 154.117 li
278.274 154.628 li
269.771 155.16 li
269.773 155.16 li
261.268 155.712 li
261.269 155.712 li
252.761 156.284 li
244.258 156.876 li
244.259 156.876 li
235.754 157.485 li
227.248 158.109 li
218.745 158.747 li
210.24 159.396 li
201.735 160.053 li
193.229 160.714 li
184.724 161.374 li
176.218 162.03 li
167.711 162.673 li
167.71 162.673 li
159.206 163.298 li
150.698 163.898 li
142.19 164.465 li
133.673 164.991 li
133.68 164.99 li
133.652 164.491 li
.156344 0 .308721 0 cmyk
f
303.788 152.66 mo
303.762 152.661 li
295.257 153.129 li
286.749 153.618 li
278.244 154.129 li
269.74 154.661 li
261.235 155.213 li
252.727 155.785 li
244.224 156.377 li
235.719 156.986 li
227.211 157.61 li
218.707 158.248 li
210.202 158.897 li
201.696 159.554 li
193.19 160.215 li
184.685 160.875 li
176.18 161.531 li
167.673 162.174 li
159.169 162.799 li
150.663 163.399 li
142.156 163.966 li
133.652 164.491 li
125.145 164.966 li
116.64 165.381 li
108.135 165.73 li
99.6292 166.006 li
108.135 165.695 li
116.64 165.303 li
125.145 164.836 li
133.652 164.303 li
142.156 163.713 li
150.663 163.077 li
159.169 162.405 li
167.673 161.704 li
176.18 160.985 li
184.685 160.253 li
193.19 159.517 li
201.696 158.782 li
210.202 158.051 li
218.707 157.33 li
227.211 156.623 li
235.719 155.932 li
244.224 155.26 li
252.727 154.609 li
261.235 153.978 li
269.74 153.371 li
278.244 152.788 li
286.749 152.228 li
295.257 151.695 li
303.762 151.184 li
303.788 151.183 li
303.788 152.66 li
f
gsave
99.622 171.491 mo
304.307 171.491 li
304.307 165.505 li
99.622 165.505 li
99.622 171.491 li
clp
304.269 171.489 mo
303.769 171.47 li
303.747 171.469 li
295.244 171.248 li
286.736 171.024 li
278.231 170.797 li
269.726 170.566 li
261.221 170.333 li
252.713 170.099 li
244.21 169.864 li
235.705 169.628 li
227.197 169.393 li
218.693 169.157 li
210.188 168.925 li
201.683 168.694 li
193.177 168.467 li
184.672 168.244 li
176.167 168.028 li
167.661 167.817 li
159.157 167.615 li
150.652 167.421 li
150.652 167.421 li
142.145 167.238 li
133.6 167.064 li
125.136 166.905 li
125.136 166.905 li
116.632 166.758 li
108.127 166.624 li
108.128 166.624 li
100.37 166.517 li
100.601 166.475 li
107.125 166.263 li
107.125 166.293 li
109.125 166.293 li
109.125 166.19 li
111.125 166.108 li
111.125 166.293 li
113.125 166.293 li
113.125 166.026 li
115.125 165.944 li
115.125 166.293 li
117.125 166.293 li
117.125 165.858 li
119.059 165.764 li
120.985 165.793 li
119.125 165.793 li
119.125 166.293 li
121.125 166.293 li
121.125 165.795 li
123.125 165.826 li
123.125 166.293 li
125.125 166.293 li
125.125 165.856 li
125.153 165.856 li
125.153 165.856 li
127.125 165.889 li
127.125 166.293 li
129.125 166.293 li
129.125 165.922 li
131.125 165.955 li
131.125 166.293 li
133.125 166.293 li
133.125 165.988 li
133.66 165.997 li
135.125 166.023 li
135.125 166.293 li
137.125 166.293 li
137.125 166.058 li
139.125 166.094 li
139.125 166.293 li
141.125 166.293 li
141.125 166.129 li
142.165 166.147 li
143.125 166.165 li
143.125 166.293 li
145.125 166.293 li
145.125 166.203 li
147.125 166.241 li
147.125 166.293 li
149.125 166.293 li
149.125 166.278 li
150.672 166.307 li
159.179 166.475 li
167.683 166.651 li
176.191 166.834 li
184.696 167.022 li
193.201 167.214 li
201.708 167.411 li
210.214 167.609 li
218.719 167.81 li
227.223 168.012 li
235.731 168.216 li
244.236 168.417 li
252.739 168.618 li
261.247 168.818 li
269.752 169.016 li
278.256 169.212 li
286.76 169.406 li
295.268 169.596 li
303.77 169.783 li
304.288 169.783 li
304.288 170.489 li
304.307 170.489 li
304.269 171.489 li
.578576 .527581 0 0 cmyk
f
149.125 166.293 mo
147.125 166.293 li
147.125 166.241 li
149.125 166.278 li
149.125 166.293 li
145.125 166.293 mo
143.125 166.293 li
143.125 166.165 li
145.125 166.203 li
145.125 166.293 li
141.125 166.293 mo
139.125 166.293 li
139.125 166.094 li
141.125 166.129 li
141.125 166.293 li
137.125 166.293 mo
135.125 166.293 li
135.125 166.023 li
137.125 166.058 li
137.125 166.293 li
133.125 166.293 mo
131.125 166.293 li
131.125 165.955 li
133.125 165.988 li
133.125 166.293 li
129.125 166.293 mo
127.125 166.293 li
127.125 165.889 li
129.125 165.922 li
129.125 166.293 li
125.125 166.293 mo
123.125 166.293 li
123.125 165.826 li
125.125 165.856 li
125.125 166.293 li
121.125 166.293 mo
119.125 166.293 li
119.125 165.793 li
120.985 165.793 li
121.125 165.795 li
121.125 166.293 li
117.125 166.293 mo
115.125 166.293 li
115.125 165.944 li
116.656 165.881 li
117.125 165.858 li
117.125 166.293 li
113.125 166.293 mo
111.125 166.293 li
111.125 166.108 li
113.125 166.026 li
113.125 166.293 li
109.125 166.293 mo
107.125 166.293 li
107.125 166.263 li
108.156 166.23 li
109.125 166.19 li
109.125 166.293 li
1 .982116 .135927 .167636 cmyk
f
100.601 166.475 mo
100.616 166.472 li
107.142 166.248 li
107.125 165.763 li
108.135 165.73 li
110.326 165.64 li
111.625 165.658 li
111.643 166.061 li
116.661 165.841 li
116.665 165.841 li
118.363 165.753 li
119.059 165.764 li
117.125 165.858 li
116.656 165.881 li
115.125 165.944 li
113.125 166.026 li
111.125 166.108 li
109.125 166.19 li
108.156 166.23 li
107.125 166.263 li
100.601 166.475 li
107.124 165.732 mo
107.12 165.598 li
108.141 165.61 li
109.557 165.63 li
108.135 165.695 li
107.124 165.732 li
.618891 .509483 0 0 cmyk
f
107.125 165.763 mo
107.124 165.732 li
108.135 165.695 li
109.557 165.63 li
110.326 165.64 li
108.135 165.73 li
107.125 165.763 li
f
grestore
0 lc
415.434 162.098 mo
415.434 162.098 li
.627649 0 1 0 cmyk
@
423.94 161.302 mo
423.94 161.302 li
@
432.444 160.485 mo
432.444 160.485 li
@
569.375 149.027 mo
569.349 149.028 li
560.845 149.605 li
552.338 150.209 li
543.832 150.841 li
535.328 151.498 li
526.821 152.183 li
518.314 152.891 li
509.809 153.624 li
501.305 154.38 li
492.798 155.154 li
484.292 155.944 li
475.788 156.752 li
467.281 157.569 li
458.775 158.393 li
450.271 159.219 li
441.765 160.043 li
433.259 160.859 li
424.755 161.662 li
416.248 162.444 li
407.742 163.198 li
399.238 163.918 li
390.731 164.599 li
382.226 165.231 li
373.722 165.809 li
365.215 166.328 li
569.375 149.027 li
.156344 0 .308721 0 cmyk
f
569.395 149.527 mo
569.377 149.527 li
560.879 150.104 li
552.373 150.708 li
543.869 151.34 li
535.366 151.997 li
526.861 152.681 li
518.355 153.389 li
509.852 154.122 li
501.349 154.878 li
492.843 155.652 li
484.338 156.442 li
475.835 157.25 li
467.329 158.067 li
458.823 158.891 li
450.319 159.717 li
441.813 160.541 li
433.307 161.357 li
424.802 162.16 li
416.294 162.942 li
416.292 162.942 li
407.786 163.696 li
407.784 163.696 li
399.28 164.416 li
390.76 165.098 li
382.254 165.73 li
373.756 166.308 li
365.245 166.827 li
365.185 165.829 li
373.692 165.31 li
382.192 164.732 li
382.189 164.732 li
390.694 164.1 li
399.198 163.42 li
399.196 163.42 li
407.7 162.7 li
407.698 162.7 li
416.204 161.946 li
416.202 161.946 li
424.709 161.164 li
433.212 160.361 li
441.717 159.545 li
450.223 158.721 li
458.727 157.895 li
467.233 157.071 li
475.74 156.254 li
484.245 155.446 li
492.752 154.656 li
501.26 153.882 li
509.765 153.126 li
518.271 152.393 li
526.78 151.685 li
535.288 151 li
543.793 150.342 li
552.301 149.71 li
560.809 149.106 li
569.322 148.529 li
569.355 148.527 li
569.395 149.527 li
f
415.434 161.987 mo
415.434 161.987 li
.883665 .769161 0 0 cmyk
@
423.94 161.17 mo
423.94 161.17 li
@
432.444 160.333 mo
432.444 160.333 li
@
365.189 165.637 mo
372.68 165.255 li
372.731 166.254 li
365.24 166.636 li
365.189 165.637 li
377.17 165.006 mo
382.197 164.721 li
382.195 164.721 li
384.654 164.568 li
384.716 165.566 li
382.257 165.719 li
382.254 165.719 li
377.226 166.004 li
377.17 165.006 li
389.146 164.289 mo
390.701 164.193 li
390.698 164.193 li
396.627 163.798 li
396.694 164.795 li
390.765 165.191 li
390.763 165.191 li
389.208 165.287 li
389.146 164.289 li
401.115 163.491 mo
407.707 163.027 li
407.705 163.027 li
408.594 162.962 li
408.668 163.959 li
407.779 164.024 li
407.777 164.025 li
401.185 164.489 li
401.115 163.491 li
413.082 162.63 mo
416.211 162.399 li
420.56 162.067 li
420.636 163.064 li
416.286 163.396 li
413.156 163.627 li
413.082 162.63 li
425.046 161.723 mo
432.523 161.139 li
432.601 162.136 li
425.124 162.721 li
425.046 161.723 li
437.008 160.783 mo
441.725 160.407 li
444.484 160.186 li
444.564 161.182 li
441.805 161.404 li
437.087 161.78 li
437.008 160.783 li
448.969 159.825 mo
450.232 159.723 li
456.445 159.222 li
456.526 160.219 li
450.312 160.72 li
449.05 160.822 li
448.969 159.825 li
460.931 158.861 mo
467.241 158.354 li
468.407 158.261 li
468.486 159.258 li
467.32 159.351 li
461.011 159.858 li
460.931 158.861 li
460.931 158.861 li
472.893 157.905 mo
475.748 157.677 li
480.37 157.314 li
480.448 158.311 li
475.827 158.674 li
472.972 158.901 li
472.893 157.905 li
472.893 157.905 li
484.857 156.962 mo
492.335 156.385 li
492.412 157.382 li
484.934 157.959 li
484.857 156.962 li
496.823 156.046 mo
501.267 155.711 li
504.303 155.488 li
504.376 156.485 li
501.341 156.708 li
496.898 157.043 li
496.823 156.046 li
496.823 156.046 li
508.791 155.158 mo
509.772 155.086 li
516.273 154.622 li
516.344 155.62 li
509.844 156.084 li
508.864 156.156 li
508.791 155.158 li
520.763 154.308 mo
526.784 153.893 li
528.247 153.795 li
528.313 154.793 li
526.852 154.891 li
520.832 155.305 li
520.763 154.308 li
532.737 153.496 mo
535.295 153.326 li
540.222 153.011 li
540.286 154.009 li
535.36 154.324 li
532.803 154.494 li
532.737 153.496 li
532.737 153.496 li
544.715 152.727 mo
552.2 152.266 li
552.262 153.264 li
544.776 153.725 li
544.715 152.727 li
556.694 152.002 mo
560.815 151.76 li
564.183 151.571 li
564.239 152.57 li
560.873 152.758 li
556.753 153 li
556.694 152.002 li
568.676 151.32 mo
569.321 151.284 li
569.329 151.283 li
569.355 151.282 li
569.395 152.281 li
569.378 152.282 li
568.732 152.318 li
568.676 151.32 li
.880003 .764462 .00308232 0 cmyk
f
544.467 153.248 mo
544.745 153.231 li
544.746 153.232 li
544.467 153.248 li
552.232 152.789 mo
552.23 152.754 li
556.722 152.48 li
556.725 152.534 li
552.33 152.784 li
552.232 152.789 li
564.214 152.118 mo
564.209 152.034 li
568.701 151.774 li
568.707 151.875 li
564.214 152.118 li
569.177 151.292 mo
569.174 151.246 li
569.174 151.246 li
569.182 151.291 li
569.177 151.292 li
.578576 .527581 0 0 cmyk
f
544.746 153.232 mo
544.745 153.231 li
552.205 152.756 li
552.23 152.754 li
552.232 152.789 li
544.746 153.232 li
556.725 152.534 mo
556.722 152.48 li
560.692 152.238 li
564.209 152.034 li
564.214 152.118 li
560.826 152.302 li
556.725 152.534 li
568.707 151.875 mo
568.701 151.774 li
569.177 151.747 li
569.182 151.747 li
569.21 151.745 li
569.177 151.292 li
569.182 151.291 li
569.284 151.844 li
568.707 151.875 li
.892607 .815763 0 0 cmyk
f
gsave
365.438 166.549 mo
569.391 166.549 li
569.391 150.834 li
365.438 150.834 li
365.438 166.549 li
clp
367.247 166.549 mo
366.947 166.549 li
369.885 166.399 li
369.884 166.419 li
367.247 166.549 li
.618891 .509483 0 0 cmyk
f
366.947 166.549 mo
365.489 166.549 li
365.443 165.637 li
365.444 165.637 li
365.444 165.636 li
365.473 165.635 li
371.488 165.318 li
369.875 165.432 li
369.91 165.931 li
369.885 166.399 li
366.947 166.549 li
.892607 .815763 0 0 cmyk
f
379.604 165.91 mo
379.625 165.909 li
379.625 165.909 li
379.604 165.91 li
381.625 165.8 mo
381.625 165.793 li
381.331 165.793 li
382.254 165.73 li
383.192 165.661 li
384.716 165.566 li
384.715 165.547 li
386.899 165.385 li
391.324 165.223 li
390.987 165.245 li
382.487 165.753 li
382.484 165.753 li
381.625 165.8 li
.578576 .527581 0 0 cmyk
f
379.625 165.909 mo
379.625 165.909 li
381.331 165.793 li
381.625 165.793 li
381.625 165.8 li
379.625 165.909 li
1 .982116 .135927 .167636 cmyk
f
379.054 165.941 mo
378.766 165.917 li
382.254 165.719 li
382.257 165.719 li
383.192 165.661 li
382.254 165.73 li
381.331 165.793 li
379.625 165.909 li
379.604 165.91 li
379.054 165.941 li
384.715 165.547 mo
384.712 165.495 li
386.552 165.398 li
386.899 165.385 li
384.715 165.547 li
.618891 .509483 0 0 cmyk
f
378.766 165.917 mo
378.262 165.876 li
378.248 165.875 li
377.957 165.859 li
378.257 165.838 li
378.257 165.838 li
384.712 165.495 li
384.715 165.547 li
384.716 165.566 li
383.192 165.661 li
382.257 165.719 li
382.254 165.719 li
378.766 165.917 li
.892607 .815763 0 0 cmyk
f
408.66 163.852 mo
408.643 163.62 li
413.126 163.223 li
413.156 163.627 li
416.286 163.396 li
420.636 163.064 li
420.596 162.546 li
424.802 162.16 li
425.078 162.134 li
425.124 162.721 li
432.601 162.136 li
432.546 161.428 li
433.307 161.357 li
437.025 161 li
437.087 161.78 li
441.805 161.404 li
444.564 161.182 li
444.492 160.281 li
448.971 159.847 li
449.05 160.822 li
450.312 160.72 li
456.526 160.219 li
456.445 159.222 li
450.327 159.716 li
458.823 158.891 li
466.747 158.123 li
467.267 158.08 li
475.754 157.377 li
484.238 156.683 li
492.728 156.002 li
501.218 155.334 li
509.7 154.686 li
518.191 154.056 li
526.68 153.448 li
535.167 152.861 li
543.654 152.298 li
552.143 151.758 li
560.632 151.24 li
567.644 150.834 li
569.144 150.834 li
569.174 151.246 li
569.177 151.292 li
568.676 151.32 li
568.701 151.774 li
564.209 152.034 li
564.183 151.571 li
560.815 151.76 li
556.694 152.002 li
556.722 152.48 li
552.23 152.754 li
552.2 152.266 li
544.715 152.727 li
544.745 153.231 li
544.467 153.248 li
544.746 153.232 li
544.776 153.725 li
552.262 153.264 li
552.232 152.789 li
552.33 152.784 li
556.725 152.534 li
556.753 153 li
560.873 152.758 li
564.239 152.57 li
564.214 152.118 li
568.707 151.875 li
568.732 152.318 li
569.375 152.282 li
569.375 152.841 li
569.365 152.841 li
560.882 153.3 li
552.388 153.782 li
543.893 154.284 li
535.401 154.807 li
526.907 155.352 li
518.412 155.918 li
509.917 156.5 li
501.426 157.1 li
492.931 157.717 li
484.434 158.346 li
475.943 158.987 li
467.447 159.637 li
458.952 160.293 li
450.459 160.951 li
441.961 161.607 li
433.465 162.257 li
424.973 162.896 li
416.476 163.521 li
412.22 163.823 li
411.461 163.823 li
411.456 163.823 li
408.66 163.852 li
460.931 158.861 mo
461.011 159.858 li
467.32 159.351 li
468.486 159.258 li
468.407 158.261 li
467.241 158.354 li
460.931 158.861 li
460.931 158.861 li
460.931 158.861 li
480.37 157.314 mo
475.748 157.677 li
472.893 157.905 li
472.893 157.905 li
472.972 158.901 li
475.827 158.674 li
480.448 158.311 li
480.37 157.314 li
492.335 156.385 mo
484.857 156.962 li
484.934 157.959 li
492.412 157.382 li
492.335 156.385 li
496.823 156.046 mo
496.898 157.043 li
501.341 156.708 li
504.376 156.485 li
504.303 155.488 li
501.267 155.711 li
496.823 156.046 li
496.823 156.046 li
496.823 156.046 li
516.273 154.622 mo
509.772 155.086 li
508.791 155.158 li
508.864 156.156 li
509.844 156.084 li
516.344 155.62 li
516.273 154.622 li
528.247 153.795 mo
526.784 153.893 li
520.763 154.308 li
520.832 155.305 li
526.852 154.891 li
528.313 154.793 li
528.247 153.795 li
532.737 153.496 mo
532.803 154.494 li
535.36 154.324 li
540.286 154.009 li
540.222 153.011 li
535.295 153.326 li
532.737 153.496 li
532.737 153.496 li
532.737 153.496 li
.578576 .527581 0 0 cmyk
f
387.436 164.365 mo
390.897 164.142 li
399.382 163.553 li
407.863 162.931 li
416.35 162.28 li
424.836 161.605 li
433.319 160.914 li
441.808 160.212 li
450.294 159.502 li
458.778 158.789 li
466.747 158.123 li
458.823 158.891 li
450.327 159.716 li
450.232 159.723 li
448.969 159.825 li
448.971 159.847 li
444.492 160.281 li
444.484 160.186 li
441.725 160.407 li
437.008 160.783 li
437.025 161 li
433.307 161.357 li
432.546 161.428 li
432.523 161.139 li
425.046 161.723 li
425.078 162.134 li
424.802 162.16 li
420.596 162.546 li
420.56 162.067 li
416.211 162.399 li
413.082 162.63 li
413.126 163.223 li
408.643 163.62 li
408.594 162.962 li
407.705 163.027 li
407.707 163.027 li
401.115 163.491 li
401.147 163.954 li
396.644 164.054 li
396.627 163.798 li
390.698 164.193 li
390.701 164.193 li
389.146 164.289 li
389.146 164.302 li
387.436 164.365 li
.618891 .509483 0 0 cmyk
f
389.146 164.302 mo
389.146 164.289 li
390.701 164.193 li
390.698 164.193 li
396.627 163.798 li
396.644 164.054 li
394.831 164.095 li
394.824 164.095 li
389.146 164.302 li
401.147 163.954 mo
401.115 163.491 li
407.707 163.027 li
407.705 163.027 li
408.594 162.962 li
408.643 163.62 li
408.66 163.852 li
403.145 163.909 li
403.139 163.909 li
401.147 163.954 li
413.156 163.627 mo
413.126 163.223 li
413.082 162.63 li
416.211 162.399 li
420.56 162.067 li
420.596 162.546 li
420.636 163.064 li
416.286 163.396 li
413.156 163.627 li
425.124 162.721 mo
425.078 162.134 li
425.046 161.723 li
432.523 161.139 li
432.546 161.428 li
432.601 162.136 li
425.124 162.721 li
437.087 161.78 mo
437.025 161 li
437.008 160.783 li
441.725 160.407 li
444.484 160.186 li
444.492 160.281 li
444.564 161.182 li
441.805 161.404 li
437.087 161.78 li
449.05 160.822 mo
448.971 159.847 li
448.969 159.825 li
450.232 159.723 li
450.327 159.716 li
456.445 159.222 li
456.526 160.219 li
450.312 160.72 li
449.05 160.822 li
461.011 159.858 mo
460.931 158.861 li
467.241 158.354 li
468.407 158.261 li
468.486 159.258 li
467.32 159.351 li
461.011 159.858 li
472.972 158.901 mo
472.893 157.905 li
472.893 157.905 li
475.748 157.677 li
480.37 157.314 li
480.448 158.311 li
475.827 158.674 li
472.972 158.901 li
460.931 158.861 mo
460.931 158.861 li
460.931 158.861 li
460.931 158.861 li
484.934 157.959 mo
484.857 156.962 li
492.335 156.385 li
492.412 157.382 li
484.934 157.959 li
496.898 157.043 mo
496.823 156.046 li
501.267 155.711 li
504.303 155.488 li
504.376 156.485 li
501.341 156.708 li
496.898 157.043 li
508.864 156.156 mo
508.791 155.158 li
509.772 155.086 li
516.273 154.622 li
516.344 155.62 li
509.844 156.084 li
508.864 156.156 li
496.823 156.046 mo
496.823 156.046 li
496.823 156.046 li
520.832 155.305 mo
520.763 154.308 li
526.784 153.893 li
528.247 153.795 li
528.313 154.793 li
526.852 154.891 li
520.832 155.305 li
532.803 154.494 mo
532.737 153.496 li
535.295 153.326 li
540.222 153.011 li
540.286 154.009 li
535.36 154.324 li
532.803 154.494 li
544.776 153.725 mo
544.746 153.232 li
552.232 152.789 li
552.262 153.264 li
544.776 153.725 li
532.737 153.496 mo
532.737 153.496 li
532.737 153.496 li
532.737 153.496 li
544.745 153.231 mo
544.715 152.727 li
552.2 152.266 li
552.23 152.754 li
552.205 152.756 li
544.745 153.231 li
556.753 153 mo
556.725 152.534 li
560.826 152.302 li
564.214 152.118 li
564.239 152.57 li
560.873 152.758 li
556.753 153 li
556.722 152.48 mo
556.694 152.002 li
560.815 151.76 li
564.183 151.571 li
564.209 152.034 li
560.692 152.238 li
556.722 152.48 li
568.732 152.318 mo
568.707 151.875 li
569.284 151.844 li
569.334 151.841 li
569.375 151.841 li
569.375 152.282 li
568.732 152.318 li
568.701 151.774 mo
568.676 151.32 li
569.177 151.292 li
569.21 151.745 li
569.182 151.747 li
569.177 151.747 li
568.701 151.774 li
.892607 .815763 0 0 cmyk
f
grestore
99.6121 165.506 mo
107.108 165.248 li
107.142 166.248 li
99.6466 166.506 li
99.6121 165.506 li
111.599 165.061 mo
116.618 164.842 li
116.613 164.843 li
119.087 164.714 li
119.139 165.713 li
116.665 165.841 li
116.661 165.841 li
111.643 166.061 li
111.599 165.061 li
111.599 165.061 li
123.581 164.481 mo
125.12 164.402 li
125.116 164.402 li
131.065 164.049 li
131.124 165.048 li
125.175 165.4 li
125.171 165.4 li
123.633 165.48 li
123.581 164.481 li
135.553 163.771 mo
142.124 163.34 li
142.121 163.34 li
143.034 163.276 li
143.105 164.273 li
142.192 164.338 li
142.189 164.338 li
135.619 164.769 li
135.553 163.771 li
135.553 163.771 li
147.523 162.959 mo
150.628 162.74 li
150.626 162.74 li
155.001 162.413 li
155.076 163.41 li
150.701 163.738 li
150.698 163.738 li
147.593 163.957 li
147.523 162.959 li
159.487 162.077 mo
166.964 161.494 li
167.042 162.491 li
159.564 163.074 li
159.487 162.077 li
171.449 161.136 mo
176.139 160.76 li
178.924 160.533 li
179.005 161.529 li
176.22 161.756 li
171.529 162.132 li
171.449 161.136 li
171.449 161.136 li
183.409 160.167 mo
184.645 160.067 li
190.883 159.554 li
190.965 160.55 li
184.726 161.063 li
183.49 161.164 li
183.409 160.167 li
183.409 160.167 li
195.368 159.186 mo
201.656 158.67 li
202.844 158.573 li
202.925 159.569 li
201.737 159.666 li
195.45 160.182 li
195.368 159.186 li
207.329 158.208 mo
210.162 157.977 li
214.805 157.603 li
214.885 158.599 li
210.243 158.973 li
207.41 159.204 li
207.329 158.208 li
219.291 157.242 mo
226.768 156.65 li
226.847 157.647 li
219.37 158.239 li
219.291 157.242 li
231.255 156.303 mo
235.68 155.961 li
235.681 155.96 li
238.734 155.731 li
238.809 156.728 li
235.756 156.957 li
235.757 156.957 li
231.332 157.3 li
231.255 156.303 li
243.222 155.393 mo
244.186 155.321 li
244.187 155.32 li
250.703 154.844 li
250.776 155.841 li
244.26 156.318 li
244.261 156.318 li
243.297 156.39 li
243.222 155.393 li
243.222 155.393 li
255.192 154.522 mo
261.2 154.097 li
261.201 154.097 li
262.675 153.997 li
262.743 154.994 li
261.269 155.095 li
261.271 155.095 li
255.263 155.519 li
255.192 154.522 li
267.165 153.69 mo
269.706 153.517 li
269.708 153.517 li
274.649 153.193 li
274.715 154.191 li
269.773 154.515 li
269.774 154.515 li
267.233 154.688 li
267.165 153.69 li
279.141 152.902 mo
286.626 152.431 li
286.689 153.429 li
279.204 153.9 li
279.141 152.902 li
291.12 152.16 mo
295.226 151.913 li
295.228 151.913 li
298.608 151.718 li
298.665 152.717 li
295.285 152.911 li
295.286 152.911 li
291.18 153.158 li
291.12 152.16 li
291.12 152.16 li
303.101 151.46 mo
303.733 151.424 li
303.743 151.423 li
303.771 151.422 li
303.808 152.422 li
303.784 152.422 li
303.158 152.458 li
303.101 151.46 li
.604303 0 .997131 0 cmyk
f
gsave
99.3871 166.662 mo
304.646 166.662 li
304.646 140.498 li
99.3871 140.498 li
99.3871 166.662 li
clp
99.5658 166.662 mo
99.5647 166.662 li
99.4981 166.293 li
99.625 166.293 li
99.6222 166.506 li
100.37 166.517 li
99.5658 166.662 li
99.6209 165.793 mo
99.4079 165.793 li
99.3871 165.678 li
99.6156 165.637 li
99.6209 165.793 li
0 0 0 0 cmyk
f
99.625 166.293 mo
99.4981 166.293 li
99.4079 165.793 li
99.6209 165.793 li
99.6286 166.017 li
99.625 166.293 li
.516472 .431495 .431495 .0754711 cmyk
f
99.6286 166.017 mo
99.6209 165.793 li
99.6156 165.637 li
99.6166 165.636 li
99.6289 165.993 li
99.6286 166.017 li
.0698863 0 .141756 0 cmyk
f
100.37 166.517 mo
99.6222 166.506 li
99.625 166.293 li
99.6381 166.293 li
99.6454 166.506 li
100.601 166.475 li
100.37 166.517 li
.228153 .226871 0 0 cmyk
f
99.6381 166.293 mo
99.625 166.293 li
99.6286 166.017 li
99.6381 166.293 li
.532219 .500008 0 0 cmyk
f
99.6454 166.506 mo
99.6381 166.293 li
99.6286 166.017 li
99.6289 165.993 li
99.6294 166.006 li
99.6292 166.006 li
99.6466 166.506 li
100.616 166.472 li
100.601 166.475 li
99.6454 166.506 li
.267308 .208011 0 0 cmyk
f
100.52 165.473 mo
108.387 164.053 li
108.386 164.053 li
116.891 162.497 li
125.395 160.941 li
133.902 159.403 li
142.422 157.896 li
150.917 156.436 li
159.426 155.03 li
159.43 155.029 li
167.936 153.684 li
176.444 152.403 li
184.953 151.189 li
193.471 150.044 li
201.972 148.967 li
210.482 147.957 li
210.486 147.956 li
218.992 147.012 li
227.5 146.129 li
227.504 146.129 li
236.01 145.306 li
244.519 144.539 li
244.522 144.539 li
253.026 143.828 li
261.535 143.166 li
270.045 142.552 li
278.564 141.983 li
287.059 141.457 li
295.569 140.97 li
304.076 140.519 li
304.582 140.498 li
304.606 140.498 li
304.646 141.467 li
304.646 141.496 li
304.148 141.517 li
304.128 141.517 li
304.128 141.517 li
295.625 141.968 li
295.627 141.968 li
287.119 142.455 li
287.121 142.455 li
278.616 142.982 li
278.618 142.982 li
270.114 143.55 li
261.61 144.163 li
261.613 144.163 li
253.107 144.825 li
244.606 145.535 li
244.609 145.535 li
236.103 146.301 li
227.6 147.124 li
227.604 147.123 li
219.099 148.006 li
210.596 148.95 li
210.6 148.95 li
202.094 149.96 li
202.098 149.959 li
193.593 151.036 li
193.597 151.036 li
185.091 152.18 li
176.59 153.392 li
176.593 153.392 li
168.088 154.673 li
159.586 156.017 li
159.589 156.016 li
158.218 156.243 li
154.522 156.68 li
146.212 157.806 li
137.902 159.091 li
129.592 160.543 li
121.282 162.167 li
112.972 163.966 li
108.054 165.129 li
107.577 165.215 li
100.52 165.473 li
0 0 0 0 cmyk
f
108.054 165.129 mo
112.972 163.966 li
121.282 162.167 li
129.592 160.543 li
137.902 159.091 li
146.212 157.806 li
154.522 156.68 li
158.218 156.243 li
151.083 157.423 li
142.582 158.883 li
134.078 160.387 li
134.08 160.387 li
125.574 161.925 li
117.071 163.481 li
108.566 165.037 li
108.565 165.037 li
108.054 165.129 li
.0698863 0 .141756 0 cmyk
f
100.509 165.475 mo
100.52 165.473 li
107.577 165.215 li
107.109 165.3 li
107.108 165.248 li
100.509 165.475 li
f
99.6466 166.506 mo
99.6294 166.006 li
99.6289 165.993 li
99.6166 165.636 li
100.509 165.475 li
107.108 165.248 li
107.109 165.3 li
100.616 166.472 li
99.6466 166.506 li
.295506 0 .462959 0 cmyk
f
grestore
1 /0 /CSD get_res sepcs
.851 sep
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
351.125 389.797 mo
(-90)
[3.32986 5.55988 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
401.754 389.797 mo
(-45)
[3.32986 5.55988 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
460.003 389.797 mo
(0)sh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
509.252 389.797 mo
(45)
[5.55991 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
563.501 389.797 mo
(90)
[5.55988 0 ]xsh
2 lc
483.12 216.668 mo
483.12 218.287 li
483.12 216.668 mo
483.12 217.478 li
477.544 216.668 mo
477.544 217.478 li
471.204 216.668 mo
471.204 217.478 li
464.098 216.668 mo
464.098 217.478 li
455.839 216.668 mo
455.839 217.478 li
446.034 216.668 mo
446.034 217.478 li
434.129 216.668 mo
434.129 217.478 li
418.758 216.668 mo
418.758 217.478 li
397.052 216.668 mo
397.052 217.478 li
@
569.375 216.668 mo
569.375 217.478 li
557.271 216.668 mo
557.271 217.478 li
541.906 216.668 mo
541.906 217.478 li
520.192 216.668 mo
520.192 217.478 li
@
355.625 216.668 mo
355.625 217.457 li
@
218.173 217.042 mo
218.173 218.661 li
218.173 217.042 mo
218.173 217.852 li
212.616 217.042 mo
212.616 217.852 li
206.298 217.042 mo
206.298 217.852 li
199.217 217.042 mo
199.217 217.852 li
190.987 217.042 mo
190.987 217.852 li
181.217 217.042 mo
181.217 217.852 li
169.354 217.042 mo
169.354 217.852 li
154.036 217.042 mo
154.036 217.852 li
132.406 217.042 mo
132.406 217.852 li
@
304.125 217.042 mo
304.125 217.852 li
292.064 217.042 mo
292.064 217.852 li
276.752 217.042 mo
276.752 217.852 li
255.115 217.042 mo
255.115 217.852 li
@
91.125 217.042 mo
91.125 217.831 li
@
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
88.9956 229.297 mo
(1)sh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
299.001 229.297 mo
(50)
[5.55988 0 ]xsh
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
353 229.297 mo
(1)sh
1 /0 /CSD get_res sepcs
.851 sep
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
563.006 229.297 mo
(50)
[5.55988 0 ]xsh
.70193 .667872 .648035 .743191 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 5954 36 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>SZNKAS+ArialMT AddT42Char 
2 6788 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/A 36 def
/C 38 def
end
SZNKAS+ArialMT /Encoding get
dup 65 /A put
dup 67 /C put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 
188{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [12 0 0 -12 0 0 ]msf
32.7495 108.463 mo
(A)sh
32.7495 268.471 mo
(C)sh
187.762 182.259 mo
196.072 184.263 li
204.382 186.241 li
212.692 188.176 li
221.002 190.058 li
229.312 191.878 li
237.622 193.632 li
245.932 195.314 li
254.242 196.924 li
262.552 198.461 li
270.862 199.924 li
279.172 201.316 li
287.482 202.637 li
295.792 203.89 li
304.101 205.078 li
304.127 205.08 li
304.127 205.071 li
304.127 201.747 li
304.101 201.744 li
295.792 200.676 li
287.482 199.547 li
279.172 198.357 li
270.862 197.103 li
262.552 195.783 li
254.242 194.397 li
245.932 192.944 li
237.622 191.424 li
229.312 189.839 li
221.002 188.192 li
212.692 186.488 li
204.382 184.733 li
196.072 182.938 li
187.762 181.113 li
179.452 179.277 li
171.142 177.445 li
162.832 175.64 li
154.522 173.885 li
146.212 172.208 li
137.902 170.636 li
129.592 169.196 li
121.282 167.917 li
112.972 166.82 li
104.662 165.931 li
112.972 166.831 li
121.282 167.967 li
129.592 169.316 li
137.902 170.853 li
146.212 172.544 li
154.522 174.36 li
162.832 176.268 li
171.142 178.238 li
179.452 180.243 li
cp
.578637 .527642 0 0 cmyk
f
444.701 164.945 mo
453.012 165.113 li
461.32 165.273 li
469.631 165.413 li
477.941 165.528 li
486.252 165.611 li
494.56 165.66 li
502.871 165.674 li
511.181 165.655 li
519.49 165.603 li
527.801 165.52 li
536.111 165.409 li
544.422 165.274 li
552.73 165.116 li
561.041 164.94 li
569.351 164.749 li
569.375 164.748 li
569.375 162.909 li
569.375 162.904 li
569.351 162.904 li
561.041 163.124 li
552.73 163.332 li
544.422 163.527 li
536.111 163.707 li
527.801 163.867 li
519.49 164.007 li
511.181 164.123 li
502.871 164.214 li
494.56 164.277 li
486.252 164.314 li
477.941 164.323 li
469.631 164.309 li
461.32 164.274 li
453.012 164.224 li
444.701 164.17 li
436.39 164.12 li
428.082 164.091 li
419.771 164.096 li
411.461 164.156 li
403.15 164.289 li
394.842 164.514 li
386.531 164.852 li
378.221 165.318 li
369.91 165.931 li
378.221 165.359 li
386.531 164.943 li
394.842 164.672 li
403.15 164.528 li
411.461 164.488 li
419.771 164.533 li
428.082 164.637 li
436.39 164.78 li
444.701 164.945 li
.156344 0 .308721 0 cmyk
f
369.875 165.432 mo
378.185 164.841 li
378.195 164.84 li
386.505 164.399 li
386.513 164.399 li
394.824 164.095 li
394.831 164.095 li
403.139 163.909 li
403.145 163.909 li
411.456 163.823 li
411.461 163.823 li
419.771 163.815 li
419.774 163.815 li
428.085 163.864 li
428.087 163.864 li
436.395 163.951 li
444.708 164.057 li
453.019 164.169 li
461.326 164.273 li
469.636 164.361 li
477.945 164.426 li
486.254 164.462 li
494.561 164.469 li
502.87 164.445 li
502.868 164.445 li
511.178 164.389 li
519.485 164.305 li
527.794 164.194 li
536.103 164.058 li
544.413 163.901 li
552.719 163.724 li
561.029 163.532 li
569.332 163.328 li
569.354 163.327 li
569.397 164.326 li
569.373 164.327 li
569.363 164.327 li
561.053 164.532 li
552.742 164.724 li
544.433 164.901 li
536.121 165.058 li
527.809 165.194 li
519.497 165.305 li
511.186 165.389 li
502.874 165.445 li
502.873 165.445 li
494.562 165.469 li
486.252 165.462 li
477.939 165.426 li
469.627 165.361 li
461.315 165.273 li
453.006 165.169 li
444.694 165.057 li
436.384 164.951 li
428.077 164.864 li
428.079 164.864 li
419.768 164.815 li
419.772 164.815 li
411.462 164.823 li
411.466 164.823 li
403.155 164.909 li
403.15 164.409 li
403.161 164.909 li
394.857 165.094 li
386.549 165.398 li
386.531 164.898 li
386.558 165.398 li
378.248 165.838 li
378.221 165.339 li
378.257 165.838 li
369.946 166.43 li
369.875 165.432 li
.604303 0 .997131 0 cmyk
f
369.937 165.432 mo
378.248 165.875 li
378.262 165.876 li
386.572 166.553 li
386.584 166.554 li
394.895 167.44 li
394.906 167.441 li
403.214 168.511 li
403.223 168.513 li
411.534 169.737 li
411.541 169.738 li
419.851 171.087 li
419.857 171.088 li
428.168 172.531 li
428.172 172.531 li
436.48 174.042 li
436.482 174.043 li
444.793 175.592 li
453.105 177.161 li
461.413 178.727 li
469.723 180.275 li
478.031 181.793 li
478.029 181.793 li
486.34 183.268 li
486.337 183.268 li
494.645 184.694 li
494.642 184.694 li
502.953 186.068 li
502.949 186.067 li
511.259 187.384 li
511.256 187.384 li
519.565 188.642 li
519.562 188.641 li
527.872 189.84 li
527.869 189.84 li
536.179 190.98 li
536.176 190.979 li
544.487 192.062 li
544.483 192.061 li
552.791 193.087 li
552.788 193.087 li
561.099 194.06 li
561.096 194.059 li
569.4 194.98 li
569.417 194.981 li
569.333 195.978 li
569.309 195.976 li
569.296 195.974 li
560.986 195.053 li
560.983 195.053 li
552.672 194.08 li
552.669 194.08 li
544.361 193.053 li
544.358 193.053 li
536.047 191.971 li
536.043 191.971 li
527.733 190.831 li
527.73 190.83 li
519.419 189.631 li
519.415 189.631 li
511.106 188.373 li
511.103 188.372 li
502.793 187.055 li
502.79 187.055 li
494.479 185.681 li
494.476 185.68 li
486.168 184.253 li
486.165 184.253 li
477.854 182.778 li
477.851 182.777 li
469.541 181.258 li
461.229 179.71 li
452.92 178.144 li
444.608 176.575 li
436.299 175.026 li
436.301 175.026 li
427.993 173.515 li
427.997 173.516 li
419.686 172.073 li
419.771 171.58 li
419.691 172.074 li
411.385 170.726 li
403.081 169.502 li
394.786 168.434 li
386.483 167.549 li
378.189 166.873 li
369.884 166.431 li
369.937 165.432 li
369.937 165.432 li
.880003 .764462 .00308232 0 cmyk
f
569.375 196.747 mo
569.351 196.744 li
561.041 195.768 li
552.73 194.742 li
544.422 193.661 li
536.111 192.524 li
527.801 191.33 li
519.49 190.077 li
511.181 188.767 li
502.871 187.398 li
494.56 185.972 li
486.252 184.492 li
477.941 182.966 li
469.631 181.399 li
461.32 179.802 li
453.012 178.189 li
447.935 177.203 li
452.92 178.144 li
461.229 179.71 li
469.541 181.258 li
477.851 182.777 li
477.854 182.778 li
486.165 184.253 li
486.168 184.253 li
494.476 185.68 li
494.479 185.681 li
502.79 187.055 li
502.793 187.055 li
511.103 188.372 li
511.106 188.373 li
519.415 189.631 li
519.419 189.631 li
527.73 190.83 li
527.733 190.831 li
536.043 191.971 li
536.047 191.971 li
544.358 193.053 li
544.361 193.053 li
552.669 194.08 li
552.672 194.08 li
560.983 195.053 li
560.986 195.053 li
569.296 195.974 li
569.309 195.976 li
569.333 195.978 li
569.375 195.478 li
569.375 196.739 li
569.375 196.747 li
569.375 194.977 mo
561.096 194.059 li
561.099 194.06 li
552.788 193.087 li
552.791 193.087 li
544.483 192.061 li
544.487 192.062 li
536.176 190.979 li
536.179 190.98 li
527.869 189.84 li
527.872 189.84 li
519.562 188.641 li
519.565 188.642 li
511.256 187.384 li
511.259 187.384 li
502.949 186.067 li
502.953 186.068 li
494.642 184.694 li
494.645 184.694 li
486.337 183.268 li
486.34 183.268 li
478.029 181.793 li
478.031 181.793 li
469.723 180.275 li
461.413 178.727 li
453.105 177.161 li
448.203 176.236 li
453.012 177.116 li
461.32 178.634 li
469.631 180.135 li
477.941 181.601 li
486.252 183.027 li
494.56 184.404 li
502.871 185.725 li
511.181 186.99 li
519.49 188.195 li
527.801 189.34 li
536.111 190.426 li
544.422 191.454 li
552.73 192.426 li
561.041 193.344 li
569.351 194.21 li
569.375 194.213 li
569.375 194.977 li
.229374 .227878 0 0 cmyk
f
569.333 195.978 mo
569.309 195.976 li
569.296 195.974 li
560.986 195.053 li
560.983 195.053 li
552.672 194.08 li
552.669 194.08 li
544.361 193.053 li
544.358 193.053 li
536.047 191.971 li
536.043 191.971 li
527.733 190.831 li
527.73 190.83 li
519.419 189.631 li
519.415 189.631 li
511.106 188.373 li
511.103 188.372 li
502.793 187.055 li
502.79 187.055 li
494.479 185.681 li
494.476 185.68 li
486.168 184.253 li
486.165 184.253 li
477.854 182.778 li
477.851 182.777 li
469.541 181.258 li
461.229 179.71 li
452.92 178.144 li
447.935 177.203 li
444.701 176.574 li
436.39 174.978 li
428.082 173.422 li
419.771 171.933 li
411.461 170.537 li
403.15 169.263 li
394.842 168.14 li
386.531 167.195 li
378.221 166.451 li
369.91 165.931 li
378.221 166.298 li
386.531 166.907 li
394.842 167.734 li
403.15 168.75 li
411.461 169.925 li
419.771 171.226 li
428.082 172.624 li
436.39 174.089 li
444.701 175.594 li
448.203 176.236 li
453.105 177.161 li
461.413 178.727 li
469.723 180.275 li
478.031 181.793 li
478.029 181.793 li
486.34 183.268 li
486.337 183.268 li
494.645 184.694 li
494.642 184.694 li
502.953 186.068 li
502.949 186.067 li
511.259 187.384 li
511.256 187.384 li
519.565 188.642 li
519.562 188.641 li
527.872 189.84 li
527.869 189.84 li
536.179 190.98 li
536.176 190.979 li
544.487 192.062 li
544.483 192.061 li
552.791 193.087 li
552.788 193.087 li
561.099 194.06 li
561.096 194.059 li
569.375 194.977 li
569.375 195.478 li
569.333 195.978 li
.713039 .631586 0 0 cmyk
f
0 lc
104.662 165.931 mo
112.972 164.104 li
121.282 162.458 li
129.592 160.995 li
137.902 159.714 li
146.212 158.603 li
154.522 157.652 li
162.832 156.844 li
171.142 156.163 li
179.452 155.592 li
187.762 155.114 li
196.072 154.712 li
204.382 154.375 li
212.692 154.089 li
221.002 153.844 li
229.312 153.632 li
237.622 153.445 li
245.932 153.28 li
254.242 153.129 li
262.552 152.992 li
270.862 152.865 li
279.172 152.745 li
287.482 152.634 li
295.792 152.528 li
304.101 152.427 li
304.127 152.427 li
.604303 0 .997131 0 cmyk
@
1 /0 /CSD get_res sepcs
.851 sep
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
70.1455 346.54 mo
(-0.5)
[3.32986 5.55989 2.77994 0 ]xsh
2 lc
91.1245 377.135 mo
304.029 377.135 li
@
91.1245 377.135 mo
91.1245 379.049 li
@
144.351 377.135 mo
144.351 379.049 li
@
197.577 377.135 mo
197.577 379.049 li
@
250.803 377.135 mo
250.803 379.049 li
@
304.029 377.135 mo
304.029 379.049 li
@
91.1245 377.135 mo
91.1245 275.668 li
@
91.1245 377.135 mo
88.9955 377.135 li
@
91.1245 343.313 mo
88.9955 343.313 li
@
91.1245 309.49 mo
88.9955 309.49 li
@
91.1245 275.668 mo
88.9955 275.668 li
@
0 lc
[7.5 4.5 ] 0 dsh
91.1245 297.029 mo
92.9145 297.032 li
94.7045 297.04 li
96.4945 297.056 li
98.2835 297.08 li
100.073 297.115 li
101.863 297.163 li
103.653 297.238 li
105.443 297.419 li
107.233 297.68 li
109.023 298.014 li
110.813 298.411 li
112.603 298.869 li
114.393 299.373 li
116.183 299.932 li
117.973 300.531 li
119.763 301.16 li
121.553 301.814 li
123.343 302.488 li
125.132 303.18 li
126.922 303.876 li
128.712 304.574 li
130.502 305.274 li
132.292 305.967 li
134.082 306.65 li
135.872 307.325 li
137.662 307.981 li
139.452 308.615 li
141.242 309.221 li
143.032 309.792 li
144.821 310.32 li
146.612 309.792 li
148.402 309.221 li
150.191 308.615 li
151.982 307.981 li
153.771 307.325 li
155.561 306.65 li
157.351 305.967 li
159.141 305.274 li
160.931 304.574 li
162.721 303.876 li
164.51 303.18 li
166.301 302.488 li
168.09 301.814 li
169.88 301.16 li
171.671 300.531 li
173.46 299.932 li
175.25 299.373 li
177.04 298.869 li
178.83 298.411 li
180.62 298.014 li
182.41 297.68 li
184.2 297.419 li
185.99 297.238 li
187.78 297.163 li
189.57 297.115 li
191.36 297.08 li
193.149 297.056 li
194.939 297.04 li
196.729 297.032 li
198.52 297.029 li
200.31 297.032 li
202.099 297.04 li
203.89 297.056 li
205.679 297.08 li
207.469 297.115 li
209.259 297.163 li
211.049 297.238 li
212.839 297.419 li
214.629 297.68 li
216.419 298.014 li
218.209 298.411 li
219.998 298.869 li
221.788 299.373 li
223.579 299.932 li
225.368 300.531 li
227.158 301.16 li
228.949 301.814 li
230.738 302.488 li
232.529 303.18 li
234.317 303.876 li
236.108 304.574 li
237.898 305.274 li
239.688 305.967 li
241.479 306.65 li
243.268 307.325 li
245.057 307.981 li
246.848 308.615 li
248.637 309.221 li
250.427 309.792 li
252.217 310.32 li
254.007 309.792 li
255.798 309.221 li
257.586 308.615 li
259.376 307.981 li
261.167 307.325 li
262.957 306.65 li
264.747 305.967 li
266.537 305.274 li
268.327 304.574 li
270.117 303.876 li
271.906 303.18 li
273.697 302.488 li
275.486 301.814 li
277.276 301.16 li
279.066 300.531 li
280.856 299.932 li
282.646 299.373 li
284.436 298.869 li
286.227 298.411 li
288.016 298.014 li
289.806 297.68 li
291.595 297.419 li
293.386 297.238 li
295.176 297.163 li
296.964 297.115 li
298.755 297.08 li
300.544 297.056 li
302.335 297.04 li
304.124 297.032 li
.604303 0 .997131 0 cmyk
@
91.1245 315.063 mo
92.9145 315.05 li
94.7045 315.013 li
96.4945 314.952 li
98.2835 314.864 li
100.073 314.748 li
101.863 314.601 li
103.653 314.422 li
105.443 314.21 li
107.233 313.961 li
109.023 313.67 li
110.813 313.341 li
112.603 312.977 li
114.393 312.583 li
116.183 312.166 li
117.973 311.736 li
119.763 311.306 li
121.553 310.891 li
123.343 310.504 li
125.132 310.163 li
126.922 309.883 li
128.712 309.677 li
130.502 309.548 li
132.292 309.498 li
134.082 309.52 li
135.872 309.614 li
137.662 309.759 li
139.452 309.945 li
141.242 310.157 li
143.032 310.373 li
144.821 310.577 li
146.612 310.381 li
148.402 310.167 li
150.191 309.955 li
151.982 309.769 li
153.771 309.624 li
155.561 309.53 li
157.351 309.506 li
159.141 309.557 li
160.931 309.685 li
162.721 309.891 li
164.51 310.168 li
166.301 310.508 li
168.09 310.894 li
169.88 311.308 li
171.671 311.736 li
173.46 312.165 li
175.25 312.581 li
177.04 312.974 li
178.83 313.338 li
180.62 313.667 li
182.41 313.959 li
184.2 314.208 li
185.99 314.419 li
187.78 314.598 li
189.57 314.744 li
191.36 314.86 li
193.149 314.949 li
194.939 315.01 li
196.729 315.047 li
198.52 315.059 li
200.31 315.047 li
202.099 315.01 li
203.89 314.949 li
205.679 314.86 li
207.469 314.744 li
209.259 314.598 li
211.049 314.419 li
212.839 314.208 li
214.629 313.959 li
216.419 313.667 li
218.209 313.338 li
219.998 312.974 li
221.788 312.581 li
223.579 312.165 li
225.368 311.736 li
227.158 311.308 li
228.949 310.894 li
230.738 310.508 li
232.529 310.168 li
234.317 309.891 li
236.108 309.685 li
237.898 309.557 li
239.688 309.506 li
241.479 309.53 li
243.268 309.624 li
245.057 309.769 li
246.848 309.955 li
248.637 310.167 li
250.427 310.381 li
252.217 310.585 li
254.007 310.373 li
255.798 310.157 li
257.586 309.945 li
259.376 309.759 li
261.167 309.614 li
262.957 309.52 li
264.747 309.498 li
266.537 309.548 li
268.327 309.677 li
270.117 309.883 li
271.906 310.163 li
273.697 310.504 li
275.486 310.891 li
277.276 311.306 li
279.066 311.736 li
280.856 312.166 li
282.646 312.583 li
284.436 312.977 li
286.227 313.341 li
288.016 313.67 li
289.806 313.961 li
291.595 314.21 li
293.386 314.422 li
295.176 314.601 li
296.964 314.748 li
298.755 314.864 li
300.544 314.952 li
302.335 315.013 li
304.124 315.05 li
.868925 .765591 .000976577 0 cmyk
@
.5 lw
2 lj
1 ml
[2 2 2 2 2 2 ] 0 dsh
91.2207 309.49 mo
304.125 309.49 li
1 /0 /CSD get_res sepcs
1 sep
@
1 lw
1 lj
10 ml
[] 0 dsh
90.7349 282.959 mo
92.5279 283.002 li
94.3209 283.126 li
96.1139 283.345 li
97.9069 283.667 li
99.7009 284.091 li
101.494 284.591 li
103.287 285.23 li
105.081 286.066 li
106.874 286.981 li
108.667 288.104 li
110.46 289.483 li
112.253 290.948 li
114.047 292.72 li
115.84 294.769 li
117.633 296.945 li
119.426 299.275 li
121.219 301.829 li
123.012 304.574 li
124.805 307.458 li
126.599 310.388 li
128.392 313.383 li
130.185 316.31 li
131.979 319.114 li
133.772 321.938 li
135.565 324.716 li
137.358 327.383 li
139.151 329.931 li
140.944 332.395 li
142.737 334.835 li
144.531 337.151 li
146.324 334.835 li
148.117 332.395 li
149.91 329.931 li
151.703 327.383 li
153.497 324.716 li
155.29 321.938 li
157.083 319.114 li
158.877 316.31 li
160.67 313.383 li
162.463 310.388 li
164.256 307.458 li
166.049 304.574 li
167.842 301.829 li
169.636 299.275 li
171.429 296.945 li
173.222 294.769 li
175.015 292.72 li
176.808 290.948 li
178.601 289.483 li
180.395 288.104 li
182.188 286.981 li
183.981 286.066 li
185.775 285.23 li
187.568 284.591 li
189.36 284.091 li
191.154 283.667 li
192.947 283.345 li
194.74 283.126 li
196.533 283.002 li
198.326 282.959 li
200.119 283.002 li
201.913 283.126 li
203.707 283.345 li
205.5 283.667 li
207.293 284.091 li
209.086 284.591 li
210.88 285.23 li
212.673 286.066 li
214.465 286.981 li
216.259 288.104 li
218.052 289.483 li
219.845 290.948 li
221.638 292.72 li
223.432 294.769 li
225.225 296.945 li
227.018 299.275 li
228.811 301.829 li
230.604 304.574 li
232.398 307.458 li
234.191 310.388 li
235.984 313.383 li
237.777 316.31 li
239.57 319.114 li
241.363 321.938 li
243.157 324.716 li
244.95 327.383 li
246.743 329.931 li
248.537 332.395 li
250.33 334.835 li
252.123 337.151 li
253.916 334.835 li
255.709 332.395 li
257.502 329.931 li
259.296 327.383 li
261.089 324.716 li
262.881 321.938 li
264.675 319.114 li
266.468 316.31 li
268.261 313.383 li
270.055 310.388 li
271.848 307.458 li
273.641 304.574 li
275.434 301.829 li
277.227 299.275 li
279.02 296.945 li
280.814 294.769 li
282.607 292.72 li
284.4 290.948 li
286.193 289.483 li
287.986 288.104 li
289.779 286.981 li
291.573 286.066 li
293.366 285.23 li
295.159 284.591 li
296.953 284.091 li
298.746 283.667 li
300.539 283.345 li
302.333 283.126 li
304.126 283.002 li
.604303 0 .997131 0 cmyk
@
90.7349 319.262 mo
92.5279 319.335 li
94.3209 319.542 li
96.1139 319.819 li
97.9069 320.02 li
99.7009 320.404 li
101.494 320.68 li
103.287 321.131 li
105.081 321.462 li
106.874 321.906 li
108.667 322.447 li
110.46 323.176 li
112.253 323.737 li
114.047 324.499 li
115.84 325.41 li
117.633 326.448 li
119.426 327.641 li
121.219 328.893 li
123.012 330.147 li
124.805 331.694 li
126.599 333.693 li
128.392 335.04 li
130.185 337.255 li
131.979 338.834 li
133.772 340.827 li
135.565 343.003 li
137.358 344.754 li
139.151 346.535 li
140.944 348.398 li
142.737 350.379 li
144.531 352.456 li
146.324 350.202 li
148.117 348.241 li
149.91 346.391 li
151.703 344.659 li
153.497 342.956 li
155.29 340.719 li
157.083 338.776 li
158.877 337.212 li
160.67 335.026 li
162.463 333.616 li
164.256 331.709 li
166.049 330.171 li
167.842 328.904 li
169.636 327.688 li
171.429 326.494 li
173.222 325.46 li
175.015 324.547 li
176.808 323.785 li
178.601 323.163 li
180.395 322.479 li
182.188 321.954 li
183.981 321.504 li
185.775 321.175 li
187.568 320.724 li
189.36 320.447 li
191.154 320.054 li
192.947 319.858 li
194.74 319.581 li
196.533 319.377 li
198.326 319.307 li
200.119 319.377 li
201.913 319.581 li
203.707 319.858 li
205.5 320.054 li
207.293 320.447 li
209.086 320.724 li
210.88 321.175 li
212.673 321.504 li
214.465 321.954 li
216.259 322.479 li
218.052 323.163 li
219.845 323.785 li
221.638 324.547 li
223.432 325.46 li
225.225 326.494 li
227.018 327.688 li
228.811 328.904 li
230.604 330.171 li
232.398 331.709 li
234.191 333.616 li
235.984 335.026 li
237.777 337.212 li
239.57 338.776 li
241.363 340.719 li
243.157 342.956 li
244.95 344.659 li
246.743 346.391 li
248.537 348.241 li
250.33 350.202 li
252.123 352.243 li
253.916 350.379 li
255.709 348.398 li
257.502 346.535 li
259.296 344.754 li
261.089 343.003 li
262.881 340.827 li
264.675 338.834 li
266.468 337.255 li
268.261 335.04 li
270.055 333.693 li
271.848 331.694 li
273.641 330.147 li
275.434 328.893 li
277.227 327.641 li
279.02 326.448 li
280.814 325.41 li
282.607 324.499 li
284.4 323.737 li
286.193 323.176 li
287.986 322.447 li
289.779 321.906 li
291.573 321.462 li
293.366 321.131 li
295.159 320.68 li
296.953 320.404 li
298.746 320.02 li
300.539 319.819 li
302.333 319.542 li
304.126 319.335 li
.868925 .765591 .000976577 0 cmyk
@
[7.5 4.5 ] 0 dsh
355.658 307.588 mo
357.447 306.977 li
359.238 306.366 li
361.027 305.757 li
362.816 305.146 li
364.606 304.525 li
366.396 303.882 li
368.185 303.215 li
369.975 302.618 li
371.764 302.064 li
373.554 301.531 li
375.345 301.02 li
377.134 300.512 li
378.922 300.01 li
380.713 299.517 li
382.502 299.024 li
384.291 298.533 li
386.081 298.049 li
387.871 297.577 li
389.66 297.126 li
391.45 296.701 li
393.238 296.308 li
395.028 295.954 li
396.818 295.642 li
398.607 295.372 li
400.396 295.15 li
402.188 294.968 li
403.977 294.827 li
405.766 294.73 li
407.557 294.672 li
409.346 294.654 li
411.135 294.672 li
412.924 294.73 li
414.715 294.827 li
416.504 294.968 li
418.294 295.15 li
420.083 295.372 li
421.873 295.642 li
423.661 295.954 li
425.451 296.308 li
427.24 296.701 li
429.03 297.126 li
430.82 297.577 li
432.609 298.049 li
434.398 298.533 li
436.189 299.024 li
437.978 299.517 li
439.767 300.01 li
441.557 300.512 li
443.347 301.02 li
445.137 301.531 li
446.927 302.064 li
448.717 302.618 li
450.506 303.215 li
452.296 303.882 li
454.084 304.525 li
455.874 305.146 li
457.664 305.757 li
459.453 306.366 li
461.242 306.977 li
463.033 307.588 li
464.822 306.977 li
466.611 306.366 li
468.4 305.757 li
470.19 305.146 li
471.979 304.525 li
473.769 303.882 li
475.559 303.215 li
477.349 302.618 li
479.139 302.064 li
480.929 301.531 li
482.717 301.02 li
484.508 300.512 li
486.297 300.01 li
488.086 299.517 li
489.877 299.024 li
491.666 298.533 li
493.455 298.049 li
495.245 297.577 li
497.035 297.126 li
498.823 296.701 li
500.612 296.308 li
502.402 295.954 li
504.192 295.642 li
505.982 295.372 li
507.771 295.15 li
509.56 294.968 li
511.351 294.827 li
513.14 294.73 li
514.929 294.672 li
516.719 294.654 li
518.51 294.672 li
520.299 294.73 li
522.089 294.827 li
523.878 294.968 li
525.668 295.15 li
527.456 295.372 li
529.246 295.642 li
531.036 295.954 li
532.825 296.308 li
534.615 296.701 li
536.404 297.126 li
538.194 297.577 li
539.984 298.049 li
541.773 298.533 li
543.561 299.024 li
545.352 299.517 li
547.141 300.01 li
548.931 300.512 li
550.721 301.02 li
552.512 301.531 li
554.301 302.064 li
556.09 302.618 li
557.879 303.215 li
559.669 303.882 li
561.459 304.525 li
563.248 305.146 li
565.037 305.757 li
566.828 306.366 li
568.617 306.977 li
.604303 0 .997131 0 cmyk
@
355.658 307.803 mo
357.447 307.223 li
359.238 306.637 li
361.027 306.051 li
362.816 305.458 li
364.606 304.853 li
366.396 304.222 li
368.185 303.551 li
369.975 302.812 li
371.764 301.974 li
373.554 301.263 li
375.345 300.691 li
377.134 300.178 li
378.922 299.727 li
380.713 299.302 li
382.502 298.901 li
384.291 298.522 li
386.081 298.174 li
387.871 297.846 li
389.66 297.538 li
391.45 297.253 li
393.238 296.992 li
395.028 296.757 li
396.818 296.549 li
398.607 296.367 li
400.396 296.216 li
402.188 296.094 li
403.977 295.995 li
405.766 295.931 li
407.557 295.894 li
409.346 295.882 li
411.135 295.894 li
412.924 295.93 li
414.715 295.995 li
416.504 296.093 li
418.294 296.215 li
420.083 296.366 li
421.873 296.547 li
423.661 296.756 li
425.451 296.99 li
427.24 297.251 li
429.03 297.537 li
430.82 297.845 li
432.609 298.173 li
434.398 298.522 li
436.189 298.901 li
437.978 299.302 li
439.767 299.727 li
441.557 300.178 li
443.347 300.691 li
445.137 301.264 li
446.927 301.975 li
448.717 302.813 li
450.506 303.553 li
452.296 304.223 li
454.084 304.855 li
455.874 305.459 li
457.664 306.051 li
459.453 306.637 li
461.242 307.222 li
463.033 307.802 li
464.822 307.222 li
466.611 306.637 li
468.4 306.051 li
470.19 305.459 li
471.979 304.855 li
473.769 304.223 li
475.559 303.553 li
477.349 302.813 li
479.139 301.975 li
480.929 301.264 li
482.717 300.691 li
484.508 300.178 li
486.297 299.727 li
488.086 299.302 li
489.877 298.901 li
491.666 298.522 li
493.455 298.173 li
495.245 297.845 li
497.035 297.537 li
498.823 297.251 li
500.612 296.99 li
502.402 296.756 li
504.192 296.547 li
505.982 296.366 li
507.771 296.215 li
509.56 296.093 li
511.351 295.995 li
513.14 295.93 li
514.929 295.894 li
516.719 295.882 li
518.51 295.894 li
520.299 295.931 li
522.089 295.995 li
523.878 296.094 li
525.668 296.216 li
527.456 296.367 li
529.246 296.549 li
531.036 296.757 li
532.825 296.992 li
534.615 297.253 li
536.404 297.538 li
538.194 297.846 li
539.984 298.174 li
541.773 298.522 li
543.561 298.901 li
545.352 299.302 li
547.141 299.727 li
548.931 300.178 li
550.721 300.691 li
552.512 301.263 li
554.301 301.974 li
556.09 302.812 li
557.879 303.551 li
559.669 304.222 li
561.459 304.853 li
563.248 305.458 li
565.037 306.051 li
566.828 306.637 li
568.617 307.223 li
.868925 .765591 .000976577 0 cmyk
@
.5 lw
2 lj
1 ml
[2 2 2 2 2 2 ] 0 dsh
355.658 308.948 mo
568.617 308.948 li
1 /0 /CSD get_res sepcs
1 sep
@
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
355.531 377.116 mo
567.803 377.116 li
1 /0 /CSD get_res sepcs
.851 sep
@
355.531 379.049 mo
355.531 377.042 li
@
408.599 379.049 mo
408.599 377.042 li
@
461.667 379.049 mo
461.667 377.042 li
@
514.735 379.049 mo
514.735 377.042 li
@
567.804 379.049 mo
567.804 377.042 li
@
355.531 377.116 mo
355.531 275.668 li
@
.5 lw
353.487 377.116 mo
355.609 377.116 li
@
1 lw
353.487 343.3 mo
355.609 343.3 li
@
353.487 309.484 mo
355.609 309.484 li
@
353.487 275.668 mo
355.609 275.668 li
@
0 lc
355.531 315.207 mo
357.319 315.103 li
359.106 314.79 li
360.893 314.348 li
362.679 313.831 li
364.469 313.408 li
366.256 312.857 li
368.043 312.347 li
369.83 312.058 li
371.618 311.722 li
373.405 311.477 li
375.192 311.413 li
376.978 311.165 li
378.767 310.999 li
380.554 310.845 li
382.344 310.498 li
384.129 309.99 li
385.917 309.427 li
387.704 308.689 li
389.492 307.817 li
391.277 306.804 li
393.066 305.694 li
394.853 304.545 li
396.641 303.278 li
398.427 302.078 li
400.217 300.925 li
402.004 299.873 li
403.791 298.956 li
405.578 298.224 li
407.365 297.767 li
409.153 297.605 li
410.94 297.767 li
412.728 298.224 li
414.514 298.956 li
416.302 299.873 li
418.09 300.925 li
419.878 302.078 li
421.664 303.278 li
423.452 304.545 li
425.239 305.694 li
427.027 306.804 li
428.813 307.817 li
430.601 308.689 li
432.388 309.427 li
434.177 309.99 li
435.963 310.498 li
437.751 310.845 li
439.538 310.999 li
441.326 311.165 li
443.112 311.413 li
444.9 311.477 li
446.688 311.722 li
448.475 312.058 li
450.263 312.347 li
452.052 312.857 li
453.838 313.408 li
455.625 313.831 li
457.413 314.348 li
459.199 314.79 li
460.987 315.103 li
462.774 315.207 li
464.562 315.103 li
466.348 314.79 li
468.136 314.348 li
469.924 313.831 li
471.712 313.408 li
473.498 312.857 li
475.286 312.347 li
477.073 312.058 li
478.861 311.722 li
480.647 311.477 li
482.435 311.413 li
484.222 311.165 li
486.01 310.999 li
487.798 310.845 li
489.585 310.498 li
491.373 309.99 li
493.16 309.427 li
494.948 308.689 li
496.734 307.817 li
498.522 306.804 li
500.309 305.694 li
502.097 304.545 li
503.885 303.278 li
505.672 302.078 li
507.459 300.925 li
509.247 299.873 li
511.034 298.956 li
512.821 298.224 li
514.608 297.767 li
516.396 297.605 li
518.183 297.767 li
519.97 298.224 li
521.758 298.956 li
523.546 299.873 li
525.333 300.925 li
527.12 302.078 li
528.907 303.278 li
530.695 304.545 li
532.482 305.694 li
534.269 306.804 li
536.057 307.817 li
537.844 308.689 li
539.632 309.427 li
541.42 309.99 li
543.207 310.498 li
544.994 310.845 li
546.782 310.999 li
548.569 311.165 li
550.356 311.413 li
552.143 311.477 li
553.931 311.722 li
555.719 312.058 li
557.506 312.347 li
559.293 312.857 li
561.081 313.408 li
562.868 313.831 li
564.655 314.348 li
566.442 314.79 li
568.23 315.103 li
.604303 0 .997131 0 cmyk
@
355.531 333.505 mo
357.319 330.988 li
359.106 328.247 li
360.893 324.948 li
362.679 319.647 li
364.469 316.586 li
366.256 315.109 li
368.043 314.423 li
369.83 314.036 li
371.618 314.271 li
373.405 315.057 li
375.192 316.365 li
376.978 317.528 li
378.767 319.007 li
380.554 320.704 li
382.344 322.449 li
384.129 324.283 li
385.917 325.901 li
387.704 327.449 li
389.492 328.984 li
391.277 330.598 li
393.066 331.455 li
394.853 332.731 li
396.641 333.345 li
398.427 334.055 li
400.217 334.733 li
402.004 335.018 li
403.791 335.25 li
405.578 335.445 li
407.365 335.58 li
409.153 335.7 li
410.94 335.609 li
412.728 335.475 li
414.514 335.295 li
416.302 335.081 li
418.09 334.808 li
419.878 334.154 li
421.664 333.449 li
423.452 332.83 li
425.239 331.602 li
427.027 330.699 li
428.813 329.151 li
430.601 327.665 li
432.388 326.144 li
434.177 324.47 li
435.963 322.648 li
437.751 320.914 li
439.538 319.23 li
441.326 317.757 li
443.112 316.529 li
444.9 315.307 li
446.688 314.548 li
448.475 314.303 li
450.263 314.701 li
452.052 315.38 li
453.838 316.888 li
455.625 319.881 li
457.413 325.421 li
459.199 328.867 li
460.987 331.705 li
462.774 334.32 li
464.562 331.705 li
466.348 328.867 li
468.136 325.421 li
469.924 319.881 li
471.712 316.888 li
473.498 315.38 li
475.286 314.701 li
477.073 314.303 li
478.861 314.548 li
480.647 315.307 li
482.435 316.529 li
484.222 317.757 li
486.01 319.23 li
487.798 320.914 li
489.585 322.648 li
491.373 324.47 li
493.16 326.144 li
494.948 327.665 li
496.734 329.151 li
498.522 330.699 li
500.309 331.602 li
502.097 332.83 li
503.885 333.449 li
505.672 334.154 li
507.459 334.808 li
509.247 335.081 li
511.034 335.295 li
512.821 335.475 li
514.608 335.609 li
516.396 335.7 li
518.183 335.58 li
519.97 335.445 li
521.758 335.25 li
523.546 335.018 li
525.333 334.733 li
527.12 334.055 li
528.907 333.345 li
530.695 332.731 li
532.482 331.455 li
534.269 330.598 li
536.057 328.984 li
537.844 327.449 li
539.632 325.901 li
541.42 324.283 li
543.207 322.449 li
544.994 320.704 li
546.782 319.007 li
548.569 317.528 li
550.356 316.365 li
552.143 315.057 li
553.931 314.271 li
555.719 314.036 li
557.506 314.423 li
559.293 315.109 li
561.081 316.586 li
562.868 319.647 li
564.655 324.948 li
566.442 328.247 li
568.23 330.988 li
.868925 .765591 .000976577 0 cmyk
@
.70193 .667872 .648035 .743191 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 6380 37 <00030096000004e905ba0011001d002a0113b90004fff440470b0b065504
044623562366237309840906691a75057009730b8305830b062716090318
272a1e161d090913121e2a2a2929001c1d1e0201021f1e1e110008182606
0c1010025506b8ffe640330f0f025506120d0d025506060c0c025506080b
0b0655060c0c0c065506140d0d0655065425260c1c101002550c0a0d0d02
550cb8fff440150b0b06550c1a2c1d1e200120000100201010025500b8ff
f6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8fffab40c
0c065500b8fff0400a0d0d0655005d2b3b5c182b10f62b2b2b2b2b2b5d3c
fd3c4e10f62b2b2b4dedf42b2b2b2b2b2b2bed003f3cfd3c3f3cfd3c1239
2f3c10fd3c392f1139111239011217393130015d005d2b33112132161615
140607161615140e0223012132373636353426262321112132373e023534
26262321960226a8cb736667858f5780c18cfe93013d81384a4b46829efe
db016d5e26435a3a54958cfead05ba59b9655ea63327bc8067b160310352
1116664d496f29fba0070c386b4652793100>SZNKAS+ArialMT AddT42Char 
2 7102 39 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/B 37 def
/D 39 def
end
SZNKAS+ArialMT /Encoding get
dup 66 /B put
dup 68 /D put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /B /C 
/D 187{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [12 0 0 -12 0 0 ]msf
335.75 108.463 mo
(B)sh
335.75 268.471 mo
(D)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 3 GetGlyphDirectory
41 <001C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C232
9F7F6ED1937D1E8A10> |
88 <001C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F
517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA
8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793
990906DA8D7F8ACFF6D70790F06B02> |
26 <001C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031CB
3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0F5
5546101EE3> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [12 0 0 -12 0 0 ]msf
283.994 759.199 mo
(\000\)\000L\000J\000X\000U\000H\000\003\000\032)
[7.33191 2.664 6.672 6.672 3.99591 6.672 3.336 0 ]xsh
.5 lw
0 lj
197.577 376.668 mo
197.577 275.418 li
1 /0 /CSD get_res sepcs
.851 sep
@
304.029 376.668 mo
304.029 275.418 li
@
408.599 376.668 mo
408.599 275.418 li
@
514.735 376.668 mo
514.735 275.418 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 3 GetGlyphDirectory
42 <001C60D8A8C9B6FF86FBC793890B55178BE49EEC5102DE4765B31919F6E9
8C7D78C667A3BB4B4E624B689DA4C385DFD1B29DE65FB8AA7AB2EF69B5E095C4
AF9914BE00567D04850B7313AA11B0D0EAADB46E151A37395ABF4FDE5690DD20
8A8203F33BC5AE42ABB3FA5CE6CC7C2FF1141A09489DA9290F5991FC3FADB6E8
008CAB5CAA6CE68D612C9A2AD14F1DB3B2ED2760EC1A22B5BECD6F37DA404DC4
340669554C25AFCF53AD025C5AA750C1F3F80E3A98BEF6E511E50C5B0BE2D927
EF> |
20 <001C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |
21 <001C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [7.0709 -7.0709 -7.0709 -7.0709 0 0 ]msf
204.689 372.902 mo
(\000*\000U\000D\000W\000L\000Q\000J\000\003\000\024)
[5.50116 -5.50116 2.35455 -2.35455 3.93143 -3.93143 1.9657 -1.9657 1.56975 -1.56973 3.93141 -3.93143 
3.93143 -3.93143 1.9657 -1.9657 0 0 ]xysh
311.205 372.902 mo
(\000*\000U\000D\000W\000L\000Q\000J\000\003\000\025)
[5.50116 -5.50116 2.35455 -2.35455 3.93143 -3.93143 1.9657 -1.9657 1.56973 -1.56973 3.93143 -3.93143 
3.93143 -3.93143 1.9657 -1.9657 0 0 ]xysh
525.213 372.902 mo
(\000*\000U\000D\000W\000L\000Q\000J\000\003\000\025)
[5.50116 -5.50116 2.35455 -2.35455 3.9314 -3.93143 1.96576 -1.9657 1.5697 -1.56973 3.93146 -3.93143 
3.9314 -3.93143 1.9657 -1.9657 0 0 ]xysh
1 lw
1 lj
[7.5 4.5 ] 0 dsh
99.6289 120.418 mo
121.406 120.418 li
.868925 .765591 .000976577 0 cmyk
@
[] 0 dsh
99.6289 133.084 mo
121.406 133.084 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 3 GetGlyphDirectory
79 <001C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |
90 <001C60D8A8C9B6079F623B1BE11B16961396A063624588AB070AF82F2F6F
EA646F6999B73C9332DE350CB17016778F548397735D109B5E72AA9A92DCB1D7
264371419D7043A117419C0FAF4C> |
75 <001C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E
131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD4
1AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2
DFA8> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [9.9998 0 0 -9.9998 0 0 ]msf
125.5 121.16 mo
(\0002\000U\000L\000J\000L\000Q\000D\000O\000\003\000P\000R\000G\000H\000O)
[7.77985 3.32985 2.21996 5.55989 2.21996 5.55989 5.55989 2.21996 2.77994 8.32976 5.55989 5.55989 
5.55988 0 ]xsh
125.5 135.329 mo
(\0000\000R\000G\000H\000O\000\003\000Z\000L\000W\000K\000\003\000I\000D\000W\000L\000J\000X\000H)
[8.32976 5.55989 5.55988 5.55989 2.21996 2.77995 7.21985 2.21996 2.77994 5.55989 2.77995 2.77994 
5.55989 2.77994 2.21996 5.55989 5.55989 0 ]xsh
[7.5 4.5 ] 0 dsh
99.6289 117.418 mo
121.406 117.418 li
.604303 0 .997131 0 cmyk
@
[] 0 dsh
99.6289 130.084 mo
121.406 130.084 li
@
1 /0 /CSD get_res sepcs
.851 sep
SZNKAT+ArialMT [10 0 0 -10 0 0 ]msf
421.877 240.129 mo
(\0000\000D\000V\000N\000\003\000F\000R\000Q\000W\000U\000D\000V\000W\000\003\000\013\000\010\000\014)
[8.32993 5.56 5 5 2.78 5 5.56 5.56 2.78 3.32993 5.56 5 
2.78 2.78 3.32993 8.89008 0 ]xsh
.75021 .679683 .670222 .90164 cmyk
SZNKAT+ArialMT [7.0709 -7.0709 -7.0709 -7.0709 0 0 ]msf
419.217 372.902 mo
(\000*\000U\000D\000W\000L\000Q\000J\000\003\000\024)
[5.50116 -5.50116 2.35455 -2.35455 3.93143 -3.93143 1.9657 -1.9657 1.56973 -1.56973 3.93143 -3.93143 
3.93143 -3.93143 1.9657 -1.9657 0 0 ]xysh
.604303 0 .997131 0 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
3 0 72 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>SZNKAS+ArialMT AddT42Char 
3 786 74 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>SZNKAS+ArialMT AddT42Char 
3 1702 76 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>SZNKAS+ArialMT AddT42Char 
3 3702 81 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>SZNKAS+ArialMT AddT42Char 
3 4156 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>SZNKAS+ArialMT AddT42Char 
3 6256 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/e 72 def
/g 74 def
/i 76 def
/n 81 def
/o 82 def
/t 87 def
end
SZNKAS+ArialMT /Encoding get
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /B /C 
/D 32{/.notdef}rp /e /.notdef /g /.notdef /i 4{/.notdef}rp 
/n /o 4{/.notdef}rp /t 139{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [9.9998 0 0 -9.9998 0 0 ]msf
254.833 147.488 mo
(Contingent)
[7.21986 5.55988 5.55988 2.77997 2.21994 5.55991 5.55988 5.55988 5.55991 0 ]xsh
.868925 .765591 .000976577 0 cmyk
%ADOBeginSubsetFont: PIABAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PIABAA+ArialMT 2 GetGlyphDirectory
36 <001C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB2
9ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D458220
8BD16D82> |
92 <001C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140A
AA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F58
36B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7
348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |
!
end
end end
%ADOEndSubsetFont
SZNKAT+ArialMT [9.9998 0 0 -9.9998 0 0 ]msf
239.833 212.826 mo
(\000$\000V\000\\\000Q)sh
262.062 212.826 mo
(\000F\000K\000U\000R\000Q\000R\000X\000V)
[4.99991 5.55988 3.32986 5.55988 5.55988 5.55991 5.55988 0 ]xsh
.697749 .673732 .640589 .739681 cmyk
SZNKAT+ArialMT [10 0 0 -10 0 0 ]msf
141.435 89.0532 mo
(\0000\000D\000W\000F\000K\000H\000G)
[8.32993 5.56 2.78 5 5.56 5.56 0 ]xsh
248.83 93.1348 mo
245.823 96.1409 240.949 96.1409 237.942 93.1348 cv
234.934 90.1288 234.934 85.2518 237.942 82.2458 cv
240.949 79.2399 245.823 79.2399 248.83 82.2458 cv
251.837 85.2518 251.837 90.1288 248.83 93.1348 cv
.419104 .33164 .320714 .00576791 cmyk
f
213.524 93.1348 mo
210.518 96.1409 205.643 96.1429 202.635 93.1348 cv
199.629 90.1288 199.629 85.2538 202.635 82.2479 cv
205.643 79.2399 210.518 79.2399 213.524 82.2479 cv
216.531 85.2538 216.531 90.1288 213.524 93.1348 cv
f
230.947 87.6914 mo
227.62 89.0504 li
228.41 87.6914 li
227.62 86.3325 li
cp
.697749 .673732 .640589 .739681 cmyk
f
0 lj
248.829 93.1348 mo
245.823 96.1409 240.948 96.1409 237.942 93.1348 cv
234.935 90.1288 234.935 85.2518 237.942 82.2458 cv
240.948 79.2399 245.823 79.2399 248.829 82.2458 cv
251.837 85.2518 251.837 90.1288 248.829 93.1348 cv
cp
.749203 .679194 .669551 .897154 cmyk
@
.697749 .673732 .640589 .739681 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 12538 55 <00010030000004ba05ba00070089400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
ffe8400b1010025500080f0f025500b8fff2b40c0c025500b8ffe2b40d0d
025500b8fffcb40c0c065500b8fffeb40d0d065500b80273b308b699182b
10f62b2b2b2b2b2b5d3c10f45d3c10fde45de6103c103c003f3f3cfd3c31
3021112135211521110213fe1d048afe1b050dadadfaf300>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/T 55 def
end
SZNKAS+ArialMT /Encoding get
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /B /C 
/D 15{/.notdef}rp /T 16{/.notdef}rp /e /.notdef /g /.notdef 
/i 4{/.notdef}rp /n /o 4{/.notdef}rp /t 139{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [10 0 0 -10 0 0 ]msf
239.942 90.8252 mo
(T)sh
213.523 93.1348 mo
210.517 96.1409 205.642 96.1429 202.636 93.1348 cv
199.629 90.1288 199.629 85.2538 202.636 82.2479 cv
205.642 79.2399 210.517 79.2399 213.523 82.2479 cv
216.531 85.2559 216.531 90.1288 213.523 93.1348 cv
cp
.749203 .679194 .669551 .897154 cmyk
@
.697749 .673732 .640589 .739681 cmyk
SZNKAS+ArialMT*1 [10 0 0 -10 0 0 ]msf
204.411 90.8252 mo
(A)sh
220.948 87.6914 mo
228.844 87.6914 li
@
.697749 .673732 .640589 .739681 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SZNKAS+ArialMT gcheck setglobal} if
2 11236 53 <000200a1000005ad05ba0018002201fc4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc040190b0b06551717
0021221e0201020018180f0f0e081e260e9c06b8ffe8b40f0f025506b8ff
f6b40d0d025506b8ffe040220c0c025506060d0d0655065d202470248024
03242218200120000100201010025500b8fff6b40f0f025500b8fff6b40d
0d025500b8fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8
fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd3c
105df62b2b2b2b19e418ed003f3c103c103c3f3cfd3c12392f2bfd3c103c
392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171
435c58b9000effde401a193911221939122219390e401c39102214391022
1f39102215392b2b2b2b2b2b2b5933112132161615140607161716171323
032e02272623231111213236363534262321a1028ac4cc7acad34d28554c
fff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e
75fe710131848c380b07fd750333377947688600>SZNKAS+ArialMT AddT42Char 
2 13286 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>SZNKAS+ArialMT AddT42Char 
2 14444 71 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>SZNKAS+ArialMT AddT42Char 
SZNKAS+ArialMT /CharStrings get begin
/R 53 def
/a 68 def
/d 71 def
end
SZNKAS+ArialMT /Encoding get
dup 82 /R put
dup 97 /a put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SZNKAS+ArialMT*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /B /C 
/D 13{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 2{/.notdef}rp 
/d /e /.notdef /g /.notdef /i 4{/.notdef}rp /n 
/o 4{/.notdef}rp /t 139{/.notdef}rp]
SZNKAS+ArialMT nf
SZNKAS+ArialMT*1 [10 0 0 -10 0 0 ]msf
412.569 92.084 mo
(Rotated)
[7.22 5.56 2.78 5.56 2.78 5.56 0 ]xsh
507.571 94.3945 mo
504.565 97.4005 499.689 97.4005 496.683 94.3945 cv
493.675 91.3885 493.675 86.5115 496.683 83.5055 cv
499.689 80.4995 504.565 80.4995 507.571 83.5055 cv
510.579 86.5115 510.579 91.3885 507.571 94.3945 cv
.419104 .33164 .320714 .00576791 cmyk
f
472.989 94.3926 mo
469.984 97.4006 465.108 97.4006 462.102 94.3946 cv
459.096 91.3886 459.096 86.5116 462.102 83.5056 cv
465.108 80.4976 469.984 80.4976 472.989 83.5056 cv
475.998 86.5136 475.998 91.3886 472.989 94.3926 cv
f
490.413 88.9492 mo
487.085 90.3102 li
487.876 88.9492 li
487.085 87.5903 li
cp
.697749 .673732 .640589 .739681 cmyk
f
511.755 83.752 mo
508.793 81.715 li
510.359 81.629 li
511.067 80.225 li
cp
f
507.571 94.3945 mo
504.565 97.4005 499.689 97.4005 496.683 94.3945 cv
493.675 91.3865 493.675 86.5135 496.683 83.5055 cv
499.689 80.4985 504.565 80.4985 507.571 83.5055 cv
510.579 86.5135 510.579 91.3865 507.571 94.3945 cv
cp
.749203 .679194 .669551 .897154 cmyk
@
.697749 .673732 .640589 .739681 cmyk
SZNKAS+ArialMT*1 [7.0711 7.0711 7.0711 -7.0711 0 0 ]msf
497.892 89.8915 mo
(T)sh
472.99 94.3926 mo
469.984 97.4006 465.109 97.4006 462.103 94.3946 cv
459.094 91.3886 459.094 86.5116 462.103 83.5056 cv
465.109 80.4976 469.984 80.4976 472.99 83.5056 cv
475.998 86.5136 475.998 91.3886 472.99 94.3926 cv
cp
.749203 .679194 .669551 .897154 cmyk
@
.697749 .673732 .640589 .739681 cmyk
SZNKAS+ArialMT*1 [10 0 0 -10 0 0 ]msf
463.877 92.084 mo
(A)sh
479.746 88.9492 mo
487.642 88.9492 li
@
494.576 81.6406 mo
494.576 81.6406 502.732 71.1957 510.272 81.6136 cv
@
1 lj
[7.5 4.5 ] 0 dsh
365.215 166.051 mo
373.722 165.545 li
382.226 164.98 li
390.732 164.361 li
399.238 163.697 li
407.742 162.991 li
416.248 162.254 li
424.755 161.489 li
433.259 160.706 li
441.765 159.908 li
450.272 159.103 li
458.776 158.295 li
467.281 157.49 li
475.788 156.692 li
484.292 155.905 li
492.798 155.132 li
501.305 154.376 li
509.809 153.639 li
518.316 152.926 li
526.819 152.234 li
535.328 151.569 li
543.832 150.928 li
552.338 150.314 li
560.845 149.727 li
569.349 149.167 li
569.375 149.165 li
.604303 0 .997131 0 cmyk
@
[] 0 dsh
104.662 165.931 mo
112.972 166.826 li
121.282 167.942 li
129.592 169.257 li
137.902 170.744 li
146.212 172.376 li
154.522 174.123 li
162.832 175.953 li
171.142 177.842 li
179.452 179.76 li
187.762 181.686 li
196.072 183.601 li
204.382 185.487 li
212.692 187.332 li
221.002 189.125 li
229.312 190.858 li
237.622 192.528 li
245.932 194.129 li
254.242 195.661 li
262.552 197.122 li
270.862 198.514 li
279.172 199.836 li
287.482 201.092 li
295.792 202.283 li
304.101 203.411 li
304.127 203.414 li
.868925 .765591 .000976577 0 cmyk
@
[7.5 4.5 ] 0 dsh
99.6294 166.006 mo
108.135 166.117 li
116.639 166.243 li
125.145 166.381 li
133.652 166.531 li
142.156 166.693 li
150.663 166.864 li
159.169 167.045 li
167.672 167.235 li
176.179 167.431 li
184.685 167.633 li
193.19 167.841 li
201.696 168.052 li
210.202 168.267 li
218.707 168.485 li
227.211 168.702 li
235.718 168.922 li
244.223 169.141 li
252.727 169.359 li
261.235 169.576 li
269.74 169.792 li
278.244 170.005 li
286.749 170.215 li
295.256 170.423 li
303.761 170.626 li
303.789 170.627 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SZNKAT+ArialMT-Identity-H uf
/SZNKAT+ArialMT /CIDFont ur
/SZNKAS+ArialMT*1 uf
/SZNKAS+ArialMT uf
/PBAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
